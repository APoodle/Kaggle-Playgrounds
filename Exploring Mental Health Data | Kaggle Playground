{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dea9d155",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:36.060977Z",
     "iopub.status.busy": "2024-11-11T22:42:36.060439Z",
     "iopub.status.idle": "2024-11-11T22:42:37.910256Z",
     "shell.execute_reply": "2024-11-11T22:42:37.909026Z"
    },
    "papermill": {
     "duration": 1.859125,
     "end_time": "2024-11-11T22:42:37.912643",
     "exception": false,
     "start_time": "2024-11-11T22:42:36.053518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e11/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e11/train.csv\n",
      "/kaggle/input/playground-series-s4e11/test.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Name</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>City</th>\n",
       "      <th>Working Professional or Student</th>\n",
       "      <th>Profession</th>\n",
       "      <th>Academic Pressure</th>\n",
       "      <th>Work Pressure</th>\n",
       "      <th>CGPA</th>\n",
       "      <th>Study Satisfaction</th>\n",
       "      <th>Job Satisfaction</th>\n",
       "      <th>Sleep Duration</th>\n",
       "      <th>Dietary Habits</th>\n",
       "      <th>Degree</th>\n",
       "      <th>Have you ever had suicidal thoughts ?</th>\n",
       "      <th>Work/Study Hours</th>\n",
       "      <th>Financial Stress</th>\n",
       "      <th>Family History of Mental Illness</th>\n",
       "      <th>Depression</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Aaradhya</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Ludhiana</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Chef</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>More than 8 hours</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>BHM</td>\n",
       "      <td>No</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Vivan</td>\n",
       "      <td>Male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>Varanasi</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Teacher</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Less than 5 hours</td>\n",
       "      <td>Unhealthy</td>\n",
       "      <td>LLB</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Yuvraj</td>\n",
       "      <td>Male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>Visakhapatnam</td>\n",
       "      <td>Student</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.97</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5-6 hours</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>B.Pharm</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Yuvraj</td>\n",
       "      <td>Male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Teacher</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Less than 5 hours</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>BBA</td>\n",
       "      <td>Yes</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Rhea</td>\n",
       "      <td>Female</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Kanpur</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Business Analyst</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5-6 hours</td>\n",
       "      <td>Unhealthy</td>\n",
       "      <td>BBA</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140695</th>\n",
       "      <td>140695</td>\n",
       "      <td>Vidya</td>\n",
       "      <td>Female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>Ahmedabad</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5-6 hours</td>\n",
       "      <td>Unhealthy</td>\n",
       "      <td>Class 12</td>\n",
       "      <td>No</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140696</th>\n",
       "      <td>140696</td>\n",
       "      <td>Lata</td>\n",
       "      <td>Female</td>\n",
       "      <td>41.0</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Content Writer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7-8 hours</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>B.Tech</td>\n",
       "      <td>Yes</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140697</th>\n",
       "      <td>140697</td>\n",
       "      <td>Aanchal</td>\n",
       "      <td>Female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Marketing Manager</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>More than 8 hours</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>B.Com</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140698</th>\n",
       "      <td>140698</td>\n",
       "      <td>Prachi</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Srinagar</td>\n",
       "      <td>Working Professional</td>\n",
       "      <td>Plumber</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5-6 hours</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>ME</td>\n",
       "      <td>Yes</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140699</th>\n",
       "      <td>140699</td>\n",
       "      <td>Sai</td>\n",
       "      <td>Male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>Patna</td>\n",
       "      <td>Student</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Less than 5 hours</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>BCA</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>140700 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id      Name  Gender   Age           City  \\\n",
       "0            0  Aaradhya  Female  49.0       Ludhiana   \n",
       "1            1     Vivan    Male  26.0       Varanasi   \n",
       "2            2    Yuvraj    Male  33.0  Visakhapatnam   \n",
       "3            3    Yuvraj    Male  22.0         Mumbai   \n",
       "4            4      Rhea  Female  30.0         Kanpur   \n",
       "...        ...       ...     ...   ...            ...   \n",
       "140695  140695     Vidya  Female  18.0      Ahmedabad   \n",
       "140696  140696      Lata  Female  41.0      Hyderabad   \n",
       "140697  140697   Aanchal  Female  24.0        Kolkata   \n",
       "140698  140698    Prachi  Female  49.0       Srinagar   \n",
       "140699  140699       Sai    Male  27.0          Patna   \n",
       "\n",
       "       Working Professional or Student         Profession  Academic Pressure  \\\n",
       "0                 Working Professional               Chef                NaN   \n",
       "1                 Working Professional            Teacher                NaN   \n",
       "2                              Student                NaN                5.0   \n",
       "3                 Working Professional            Teacher                NaN   \n",
       "4                 Working Professional   Business Analyst                NaN   \n",
       "...                                ...                ...                ...   \n",
       "140695            Working Professional                NaN                NaN   \n",
       "140696            Working Professional     Content Writer                NaN   \n",
       "140697            Working Professional  Marketing Manager                NaN   \n",
       "140698            Working Professional            Plumber                NaN   \n",
       "140699                         Student                NaN                4.0   \n",
       "\n",
       "        Work Pressure  CGPA  Study Satisfaction  Job Satisfaction  \\\n",
       "0                 5.0   NaN                 NaN               2.0   \n",
       "1                 4.0   NaN                 NaN               3.0   \n",
       "2                 NaN  8.97                 2.0               NaN   \n",
       "3                 5.0   NaN                 NaN               1.0   \n",
       "4                 1.0   NaN                 NaN               1.0   \n",
       "...               ...   ...                 ...               ...   \n",
       "140695            5.0   NaN                 NaN               4.0   \n",
       "140696            5.0   NaN                 NaN               4.0   \n",
       "140697            3.0   NaN                 NaN               1.0   \n",
       "140698            5.0   NaN                 NaN               2.0   \n",
       "140699            NaN  9.24                 1.0               NaN   \n",
       "\n",
       "           Sleep Duration Dietary Habits    Degree  \\\n",
       "0       More than 8 hours        Healthy       BHM   \n",
       "1       Less than 5 hours      Unhealthy       LLB   \n",
       "2               5-6 hours        Healthy   B.Pharm   \n",
       "3       Less than 5 hours       Moderate       BBA   \n",
       "4               5-6 hours      Unhealthy       BBA   \n",
       "...                   ...            ...       ...   \n",
       "140695          5-6 hours      Unhealthy  Class 12   \n",
       "140696          7-8 hours       Moderate    B.Tech   \n",
       "140697  More than 8 hours       Moderate     B.Com   \n",
       "140698          5-6 hours       Moderate        ME   \n",
       "140699  Less than 5 hours        Healthy       BCA   \n",
       "\n",
       "       Have you ever had suicidal thoughts ?  Work/Study Hours  \\\n",
       "0                                         No               1.0   \n",
       "1                                        Yes               7.0   \n",
       "2                                        Yes               3.0   \n",
       "3                                        Yes              10.0   \n",
       "4                                        Yes               9.0   \n",
       "...                                      ...               ...   \n",
       "140695                                    No               2.0   \n",
       "140696                                   Yes               6.0   \n",
       "140697                                    No               4.0   \n",
       "140698                                   Yes              10.0   \n",
       "140699                                   Yes               2.0   \n",
       "\n",
       "        Financial Stress Family History of Mental Illness  Depression  \n",
       "0                    2.0                               No           0  \n",
       "1                    3.0                               No           1  \n",
       "2                    1.0                               No           1  \n",
       "3                    1.0                              Yes           1  \n",
       "4                    4.0                              Yes           0  \n",
       "...                  ...                              ...         ...  \n",
       "140695               4.0                              Yes           1  \n",
       "140696               5.0                              Yes           0  \n",
       "140697               4.0                               No           0  \n",
       "140698               1.0                               No           0  \n",
       "140699               3.0                              Yes           1  \n",
       "\n",
       "[140700 rows x 20 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n",
    "train = pd.read_csv('/kaggle/input/playground-series-s4e11/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s4e11/test.csv')\n",
    "\n",
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86cb79b5",
   "metadata": {
    "papermill": {
     "duration": 0.004725,
     "end_time": "2024-11-11T22:42:37.922513",
     "exception": false,
     "start_time": "2024-11-11T22:42:37.917788",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# <center>Kaggle Playground: Predicting Loan Approval</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81028242",
   "metadata": {
    "papermill": {
     "duration": 0.00454,
     "end_time": "2024-11-11T22:42:37.931918",
     "exception": false,
     "start_time": "2024-11-11T22:42:37.927378",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### <center>Your goal is to use data from a mental health survey to explore factors that may cause individuals to experience depression.</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3c1a1cf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:37.943393Z",
     "iopub.status.busy": "2024-11-11T22:42:37.942983Z",
     "iopub.status.idle": "2024-11-11T22:42:37.951882Z",
     "shell.execute_reply": "2024-11-11T22:42:37.950755Z"
    },
    "papermill": {
     "duration": 0.017552,
     "end_time": "2024-11-11T22:42:37.954266",
     "exception": false,
     "start_time": "2024-11-11T22:42:37.936714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                                         int64\n",
       "Name                                      object\n",
       "Gender                                    object\n",
       "Age                                      float64\n",
       "City                                      object\n",
       "Working Professional or Student           object\n",
       "Profession                                object\n",
       "Academic Pressure                        float64\n",
       "Work Pressure                            float64\n",
       "CGPA                                     float64\n",
       "Study Satisfaction                       float64\n",
       "Job Satisfaction                         float64\n",
       "Sleep Duration                            object\n",
       "Dietary Habits                            object\n",
       "Degree                                    object\n",
       "Have you ever had suicidal thoughts ?     object\n",
       "Work/Study Hours                         float64\n",
       "Financial Stress                         float64\n",
       "Family History of Mental Illness          object\n",
       "Depression                                 int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dee205af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:37.966755Z",
     "iopub.status.busy": "2024-11-11T22:42:37.965825Z",
     "iopub.status.idle": "2024-11-11T22:42:39.560912Z",
     "shell.execute_reply": "2024-11-11T22:42:39.559855Z"
    },
    "papermill": {
     "duration": 1.604137,
     "end_time": "2024-11-11T22:42:39.563584",
     "exception": false,
     "start_time": "2024-11-11T22:42:37.959447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = train.drop(['Name', 'Depression', 'id'], axis=1)\n",
    "y = train['Depression']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=10, test_size=.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b4e3365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:39.575832Z",
     "iopub.status.busy": "2024-11-11T22:42:39.575287Z",
     "iopub.status.idle": "2024-11-11T22:42:40.795678Z",
     "shell.execute_reply": "2024-11-11T22:42:40.794699Z"
    },
    "papermill": {
     "duration": 1.22913,
     "end_time": "2024-11-11T22:42:40.797868",
     "exception": false,
     "start_time": "2024-11-11T22:42:39.568738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.93863243e-01, -4.25971150e-02, -8.07451397e-06, ...,\n",
       "         6.70000000e+01,  0.00000000e+00,  1.00000000e+00],\n",
       "       [-1.40581620e+00, -4.25971150e-02,  1.59050965e+00, ...,\n",
       "         1.60000000e+01,  1.00000000e+00,  0.00000000e+00],\n",
       "       [ 1.58366764e+00, -4.25971150e-02, -8.07451397e-06, ...,\n",
       "         6.00000000e+01,  0.00000000e+00,  0.00000000e+00],\n",
       "       ...,\n",
       "       [ 1.01808965e+00, -4.25971150e-02,  7.95250833e-01, ...,\n",
       "         1.60000000e+01,  0.00000000e+00,  0.00000000e+00],\n",
       "       [ 5.33308506e-01, -4.25971150e-02,  7.95250833e-01, ...,\n",
       "         6.40000000e+01,  0.00000000e+00,  0.00000000e+00],\n",
       "       [ 1.17968333e+00, -4.25971150e-02,  1.59050965e+00, ...,\n",
       "         2.70000000e+01,  1.00000000e+00,  0.00000000e+00]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import StandardScaler, OrdinalEncoder, FunctionTransformer\n",
    "\n",
    "# Select numerical and categorical columns\n",
    "numerical_columns = X_train.select_dtypes(exclude=['object']).columns.tolist()  # Now it's a list\n",
    "categorical_columns = X_train.select_dtypes(include=['object']).columns\n",
    "\n",
    "# Define numerical pipeline\n",
    "numerical_pipeline = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='median')),\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('convert_to_float32', FunctionTransformer(lambda x: x.astype(np.float32)))\n",
    "])\n",
    "\n",
    "# Define categorical pipeline\n",
    "categorical_pipeline = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
    "    ('ordinal', OrdinalEncoder(dtype=np.int32, handle_unknown='use_encoded_value', unknown_value=-1))\n",
    "])\n",
    "\n",
    "# Create the ColumnTransformer with both pipelines\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_pipeline, numerical_columns),\n",
    "        ('cat', categorical_pipeline, categorical_columns)\n",
    "    ]\n",
    ")\n",
    "\n",
    "# Fit and transform the data\n",
    "X_train_preprocessed = preprocessor.fit_transform(X_train)\n",
    "X_test_preprocessed = preprocessor.transform(X_test)\n",
    "test_preprocessed = preprocessor.transform(test)\n",
    "\n",
    "X_train_preprocessed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3f945555",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:40.810381Z",
     "iopub.status.busy": "2024-11-11T22:42:40.809624Z",
     "iopub.status.idle": "2024-11-11T22:42:42.570575Z",
     "shell.execute_reply": "2024-11-11T22:42:42.569158Z"
    },
    "papermill": {
     "duration": 1.770104,
     "end_time": "2024-11-11T22:42:42.573436",
     "exception": false,
     "start_time": "2024-11-11T22:42:40.803332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.9388770433546553\n"
     ]
    }
   ],
   "source": [
    "from sklearn import ensemble\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "hg = ensemble.HistGradientBoostingClassifier()\n",
    "model = hg.fit(X_train_preprocessed, y_train)\n",
    "\n",
    "predictions = model.predict(X_test_preprocessed)\n",
    "\n",
    "print('Accuracy: ', accuracy_score(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "04f06f1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:42.587917Z",
     "iopub.status.busy": "2024-11-11T22:42:42.587047Z",
     "iopub.status.idle": "2024-11-11T22:42:43.045804Z",
     "shell.execute_reply": "2024-11-11T22:42:43.044620Z"
    },
    "papermill": {
     "duration": 0.469478,
     "end_time": "2024-11-11T22:42:43.048633",
     "exception": false,
     "start_time": "2024-11-11T22:42:42.579155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Depression</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>140700</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>140701</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>140702</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140703</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>140704</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93795</th>\n",
       "      <td>234495</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93796</th>\n",
       "      <td>234496</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93797</th>\n",
       "      <td>234497</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93798</th>\n",
       "      <td>234498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93799</th>\n",
       "      <td>234499</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93800 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           id  Depression\n",
       "0      140700           0\n",
       "1      140701           0\n",
       "2      140702           0\n",
       "3      140703           1\n",
       "4      140704           0\n",
       "...       ...         ...\n",
       "93795  234495           0\n",
       "93796  234496           1\n",
       "93797  234497           0\n",
       "93798  234498           1\n",
       "93799  234499           0\n",
       "\n",
       "[93800 rows x 2 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sublesson = pd.DataFrame()\n",
    "sublesson['id'] = test.id\n",
    "\n",
    "predictions = model.predict(test_preprocessed)\n",
    "\n",
    "sublesson['Depression'] = predictions\n",
    "sublesson.to_csv('PS_S4E11.csv', index=False)\n",
    "\n",
    "sublesson"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3f5674d",
   "metadata": {
    "papermill": {
     "duration": 0.007244,
     "end_time": "2024-11-11T22:42:43.063693",
     "exception": false,
     "start_time": "2024-11-11T22:42:43.056449",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Public Score: 0.92569"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "db577f7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:43.078026Z",
     "iopub.status.busy": "2024-11-11T22:42:43.077017Z",
     "iopub.status.idle": "2024-11-11T22:42:56.452104Z",
     "shell.execute_reply": "2024-11-11T22:42:56.450942Z"
    },
    "papermill": {
     "duration": 13.384541,
     "end_time": "2024-11-11T22:42:56.454617",
     "exception": false,
     "start_time": "2024-11-11T22:42:43.070076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tvalidation_0-logloss:0.45540\n",
      "[1]\tvalidation_0-logloss:0.43440\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2]\tvalidation_0-logloss:0.41596\n",
      "[3]\tvalidation_0-logloss:0.39969\n",
      "[4]\tvalidation_0-logloss:0.38508\n",
      "[5]\tvalidation_0-logloss:0.37183\n",
      "[6]\tvalidation_0-logloss:0.35974\n",
      "[7]\tvalidation_0-logloss:0.34879\n",
      "[8]\tvalidation_0-logloss:0.33875\n",
      "[9]\tvalidation_0-logloss:0.32953\n",
      "[10]\tvalidation_0-logloss:0.32099\n",
      "[11]\tvalidation_0-logloss:0.31308\n",
      "[12]\tvalidation_0-logloss:0.30579\n",
      "[13]\tvalidation_0-logloss:0.29903\n",
      "[14]\tvalidation_0-logloss:0.29266\n",
      "[15]\tvalidation_0-logloss:0.28678\n",
      "[16]\tvalidation_0-logloss:0.28110\n",
      "[17]\tvalidation_0-logloss:0.27597\n",
      "[18]\tvalidation_0-logloss:0.27099\n",
      "[19]\tvalidation_0-logloss:0.26647\n",
      "[20]\tvalidation_0-logloss:0.26210\n",
      "[21]\tvalidation_0-logloss:0.25793\n",
      "[22]\tvalidation_0-logloss:0.25423\n",
      "[23]\tvalidation_0-logloss:0.25045\n",
      "[24]\tvalidation_0-logloss:0.24700\n",
      "[25]\tvalidation_0-logloss:0.24385\n",
      "[26]\tvalidation_0-logloss:0.24080\n",
      "[27]\tvalidation_0-logloss:0.23789\n",
      "[28]\tvalidation_0-logloss:0.23473\n",
      "[29]\tvalidation_0-logloss:0.23215\n",
      "[30]\tvalidation_0-logloss:0.22970\n",
      "[31]\tvalidation_0-logloss:0.22695\n",
      "[32]\tvalidation_0-logloss:0.22469\n",
      "[33]\tvalidation_0-logloss:0.22223\n",
      "[34]\tvalidation_0-logloss:0.22024\n",
      "[35]\tvalidation_0-logloss:0.21827\n",
      "[36]\tvalidation_0-logloss:0.21611\n",
      "[37]\tvalidation_0-logloss:0.21435\n",
      "[38]\tvalidation_0-logloss:0.21266\n",
      "[39]\tvalidation_0-logloss:0.21104\n",
      "[40]\tvalidation_0-logloss:0.20918\n",
      "[41]\tvalidation_0-logloss:0.20766\n",
      "[42]\tvalidation_0-logloss:0.20626\n",
      "[43]\tvalidation_0-logloss:0.20461\n",
      "[44]\tvalidation_0-logloss:0.20330\n",
      "[45]\tvalidation_0-logloss:0.20203\n",
      "[46]\tvalidation_0-logloss:0.20083\n",
      "[47]\tvalidation_0-logloss:0.19959\n",
      "[48]\tvalidation_0-logloss:0.19845\n",
      "[49]\tvalidation_0-logloss:0.19735\n",
      "[50]\tvalidation_0-logloss:0.19607\n",
      "[51]\tvalidation_0-logloss:0.19504\n",
      "[52]\tvalidation_0-logloss:0.19410\n",
      "[53]\tvalidation_0-logloss:0.19308\n",
      "[54]\tvalidation_0-logloss:0.19217\n",
      "[55]\tvalidation_0-logloss:0.19121\n",
      "[56]\tvalidation_0-logloss:0.19027\n",
      "[57]\tvalidation_0-logloss:0.18945\n",
      "[58]\tvalidation_0-logloss:0.18862\n",
      "[59]\tvalidation_0-logloss:0.18779\n",
      "[60]\tvalidation_0-logloss:0.18703\n",
      "[61]\tvalidation_0-logloss:0.18630\n",
      "[62]\tvalidation_0-logloss:0.18560\n",
      "[63]\tvalidation_0-logloss:0.18481\n",
      "[64]\tvalidation_0-logloss:0.18411\n",
      "[65]\tvalidation_0-logloss:0.18347\n",
      "[66]\tvalidation_0-logloss:0.18278\n",
      "[67]\tvalidation_0-logloss:0.18216\n",
      "[68]\tvalidation_0-logloss:0.18157\n",
      "[69]\tvalidation_0-logloss:0.18084\n",
      "[70]\tvalidation_0-logloss:0.18019\n",
      "[71]\tvalidation_0-logloss:0.17963\n",
      "[72]\tvalidation_0-logloss:0.17908\n",
      "[73]\tvalidation_0-logloss:0.17854\n",
      "[74]\tvalidation_0-logloss:0.17802\n",
      "[75]\tvalidation_0-logloss:0.17752\n",
      "[76]\tvalidation_0-logloss:0.17697\n",
      "[77]\tvalidation_0-logloss:0.17649\n",
      "[78]\tvalidation_0-logloss:0.17587\n",
      "[79]\tvalidation_0-logloss:0.17540\n",
      "[80]\tvalidation_0-logloss:0.17497\n",
      "[81]\tvalidation_0-logloss:0.17450\n",
      "[82]\tvalidation_0-logloss:0.17398\n",
      "[83]\tvalidation_0-logloss:0.17355\n",
      "[84]\tvalidation_0-logloss:0.17310\n",
      "[85]\tvalidation_0-logloss:0.17271\n",
      "[86]\tvalidation_0-logloss:0.17231\n",
      "[87]\tvalidation_0-logloss:0.17194\n",
      "[88]\tvalidation_0-logloss:0.17157\n",
      "[89]\tvalidation_0-logloss:0.17123\n",
      "[90]\tvalidation_0-logloss:0.17088\n",
      "[91]\tvalidation_0-logloss:0.17054\n",
      "[92]\tvalidation_0-logloss:0.17022\n",
      "[93]\tvalidation_0-logloss:0.16988\n",
      "[94]\tvalidation_0-logloss:0.16955\n",
      "[95]\tvalidation_0-logloss:0.16921\n",
      "[96]\tvalidation_0-logloss:0.16894\n",
      "[97]\tvalidation_0-logloss:0.16863\n",
      "[98]\tvalidation_0-logloss:0.16834\n",
      "[99]\tvalidation_0-logloss:0.16798\n",
      "[100]\tvalidation_0-logloss:0.16766\n",
      "[101]\tvalidation_0-logloss:0.16737\n",
      "[102]\tvalidation_0-logloss:0.16707\n",
      "[103]\tvalidation_0-logloss:0.16680\n",
      "[104]\tvalidation_0-logloss:0.16655\n",
      "[105]\tvalidation_0-logloss:0.16630\n",
      "[106]\tvalidation_0-logloss:0.16603\n",
      "[107]\tvalidation_0-logloss:0.16577\n",
      "[108]\tvalidation_0-logloss:0.16549\n",
      "[109]\tvalidation_0-logloss:0.16527\n",
      "[110]\tvalidation_0-logloss:0.16505\n",
      "[111]\tvalidation_0-logloss:0.16483\n",
      "[112]\tvalidation_0-logloss:0.16456\n",
      "[113]\tvalidation_0-logloss:0.16434\n",
      "[114]\tvalidation_0-logloss:0.16414\n",
      "[115]\tvalidation_0-logloss:0.16390\n",
      "[116]\tvalidation_0-logloss:0.16370\n",
      "[117]\tvalidation_0-logloss:0.16350\n",
      "[118]\tvalidation_0-logloss:0.16332\n",
      "[119]\tvalidation_0-logloss:0.16315\n",
      "[120]\tvalidation_0-logloss:0.16295\n",
      "[121]\tvalidation_0-logloss:0.16270\n",
      "[122]\tvalidation_0-logloss:0.16249\n",
      "[123]\tvalidation_0-logloss:0.16232\n",
      "[124]\tvalidation_0-logloss:0.16212\n",
      "[125]\tvalidation_0-logloss:0.16195\n",
      "[126]\tvalidation_0-logloss:0.16174\n",
      "[127]\tvalidation_0-logloss:0.16156\n",
      "[128]\tvalidation_0-logloss:0.16142\n",
      "[129]\tvalidation_0-logloss:0.16128\n",
      "[130]\tvalidation_0-logloss:0.16109\n",
      "[131]\tvalidation_0-logloss:0.16089\n",
      "[132]\tvalidation_0-logloss:0.16074\n",
      "[133]\tvalidation_0-logloss:0.16060\n",
      "[134]\tvalidation_0-logloss:0.16045\n",
      "[135]\tvalidation_0-logloss:0.16032\n",
      "[136]\tvalidation_0-logloss:0.16018\n",
      "[137]\tvalidation_0-logloss:0.16005\n",
      "[138]\tvalidation_0-logloss:0.15992\n",
      "[139]\tvalidation_0-logloss:0.15977\n",
      "[140]\tvalidation_0-logloss:0.15963\n",
      "[141]\tvalidation_0-logloss:0.15950\n",
      "[142]\tvalidation_0-logloss:0.15938\n",
      "[143]\tvalidation_0-logloss:0.15927\n",
      "[144]\tvalidation_0-logloss:0.15915\n",
      "[145]\tvalidation_0-logloss:0.15904\n",
      "[146]\tvalidation_0-logloss:0.15891\n",
      "[147]\tvalidation_0-logloss:0.15879\n",
      "[148]\tvalidation_0-logloss:0.15869\n",
      "[149]\tvalidation_0-logloss:0.15853\n",
      "[150]\tvalidation_0-logloss:0.15841\n",
      "[151]\tvalidation_0-logloss:0.15830\n",
      "[152]\tvalidation_0-logloss:0.15821\n",
      "[153]\tvalidation_0-logloss:0.15812\n",
      "[154]\tvalidation_0-logloss:0.15802\n",
      "[155]\tvalidation_0-logloss:0.15791\n",
      "[156]\tvalidation_0-logloss:0.15782\n",
      "[157]\tvalidation_0-logloss:0.15770\n",
      "[158]\tvalidation_0-logloss:0.15760\n",
      "[159]\tvalidation_0-logloss:0.15749\n",
      "[160]\tvalidation_0-logloss:0.15740\n",
      "[161]\tvalidation_0-logloss:0.15732\n",
      "[162]\tvalidation_0-logloss:0.15723\n",
      "[163]\tvalidation_0-logloss:0.15715\n",
      "[164]\tvalidation_0-logloss:0.15706\n",
      "[165]\tvalidation_0-logloss:0.15700\n",
      "[166]\tvalidation_0-logloss:0.15689\n",
      "[167]\tvalidation_0-logloss:0.15681\n",
      "[168]\tvalidation_0-logloss:0.15672\n",
      "[169]\tvalidation_0-logloss:0.15664\n",
      "[170]\tvalidation_0-logloss:0.15656\n",
      "[171]\tvalidation_0-logloss:0.15648\n",
      "[172]\tvalidation_0-logloss:0.15639\n",
      "[173]\tvalidation_0-logloss:0.15630\n",
      "[174]\tvalidation_0-logloss:0.15622\n",
      "[175]\tvalidation_0-logloss:0.15616\n",
      "[176]\tvalidation_0-logloss:0.15609\n",
      "[177]\tvalidation_0-logloss:0.15602\n",
      "[178]\tvalidation_0-logloss:0.15594\n",
      "[179]\tvalidation_0-logloss:0.15587\n",
      "[180]\tvalidation_0-logloss:0.15580\n",
      "[181]\tvalidation_0-logloss:0.15574\n",
      "[182]\tvalidation_0-logloss:0.15567\n",
      "[183]\tvalidation_0-logloss:0.15561\n",
      "[184]\tvalidation_0-logloss:0.15554\n",
      "[185]\tvalidation_0-logloss:0.15542\n",
      "[186]\tvalidation_0-logloss:0.15537\n",
      "[187]\tvalidation_0-logloss:0.15532\n",
      "[188]\tvalidation_0-logloss:0.15525\n",
      "[189]\tvalidation_0-logloss:0.15518\n",
      "[190]\tvalidation_0-logloss:0.15512\n",
      "[191]\tvalidation_0-logloss:0.15504\n",
      "[192]\tvalidation_0-logloss:0.15499\n",
      "[193]\tvalidation_0-logloss:0.15490\n",
      "[194]\tvalidation_0-logloss:0.15484\n",
      "[195]\tvalidation_0-logloss:0.15480\n",
      "[196]\tvalidation_0-logloss:0.15474\n",
      "[197]\tvalidation_0-logloss:0.15470\n",
      "[198]\tvalidation_0-logloss:0.15465\n",
      "[199]\tvalidation_0-logloss:0.15459\n",
      "[200]\tvalidation_0-logloss:0.15451\n",
      "[201]\tvalidation_0-logloss:0.15446\n",
      "[202]\tvalidation_0-logloss:0.15443\n",
      "[203]\tvalidation_0-logloss:0.15437\n",
      "[204]\tvalidation_0-logloss:0.15433\n",
      "[205]\tvalidation_0-logloss:0.15429\n",
      "[206]\tvalidation_0-logloss:0.15422\n",
      "[207]\tvalidation_0-logloss:0.15419\n",
      "[208]\tvalidation_0-logloss:0.15414\n",
      "[209]\tvalidation_0-logloss:0.15410\n",
      "[210]\tvalidation_0-logloss:0.15405\n",
      "[211]\tvalidation_0-logloss:0.15398\n",
      "[212]\tvalidation_0-logloss:0.15395\n",
      "[213]\tvalidation_0-logloss:0.15391\n",
      "[214]\tvalidation_0-logloss:0.15386\n",
      "[215]\tvalidation_0-logloss:0.15382\n",
      "[216]\tvalidation_0-logloss:0.15378\n",
      "[217]\tvalidation_0-logloss:0.15373\n",
      "[218]\tvalidation_0-logloss:0.15367\n",
      "[219]\tvalidation_0-logloss:0.15364\n",
      "[220]\tvalidation_0-logloss:0.15359\n",
      "[221]\tvalidation_0-logloss:0.15355\n",
      "[222]\tvalidation_0-logloss:0.15353\n",
      "[223]\tvalidation_0-logloss:0.15348\n",
      "[224]\tvalidation_0-logloss:0.15344\n",
      "[225]\tvalidation_0-logloss:0.15339\n",
      "[226]\tvalidation_0-logloss:0.15335\n",
      "[227]\tvalidation_0-logloss:0.15332\n",
      "[228]\tvalidation_0-logloss:0.15328\n",
      "[229]\tvalidation_0-logloss:0.15324\n",
      "[230]\tvalidation_0-logloss:0.15320\n",
      "[231]\tvalidation_0-logloss:0.15316\n",
      "[232]\tvalidation_0-logloss:0.15313\n",
      "[233]\tvalidation_0-logloss:0.15310\n",
      "[234]\tvalidation_0-logloss:0.15308\n",
      "[235]\tvalidation_0-logloss:0.15306\n",
      "[236]\tvalidation_0-logloss:0.15304\n",
      "[237]\tvalidation_0-logloss:0.15300\n",
      "[238]\tvalidation_0-logloss:0.15297\n",
      "[239]\tvalidation_0-logloss:0.15294\n",
      "[240]\tvalidation_0-logloss:0.15290\n",
      "[241]\tvalidation_0-logloss:0.15288\n",
      "[242]\tvalidation_0-logloss:0.15285\n",
      "[243]\tvalidation_0-logloss:0.15280\n",
      "[244]\tvalidation_0-logloss:0.15276\n",
      "[245]\tvalidation_0-logloss:0.15273\n",
      "[246]\tvalidation_0-logloss:0.15271\n",
      "[247]\tvalidation_0-logloss:0.15267\n",
      "[248]\tvalidation_0-logloss:0.15265\n",
      "[249]\tvalidation_0-logloss:0.15263\n",
      "[250]\tvalidation_0-logloss:0.15259\n",
      "[251]\tvalidation_0-logloss:0.15257\n",
      "[252]\tvalidation_0-logloss:0.15256\n",
      "[253]\tvalidation_0-logloss:0.15253\n",
      "[254]\tvalidation_0-logloss:0.15250\n",
      "[255]\tvalidation_0-logloss:0.15247\n",
      "[256]\tvalidation_0-logloss:0.15244\n",
      "[257]\tvalidation_0-logloss:0.15241\n",
      "[258]\tvalidation_0-logloss:0.15238\n",
      "[259]\tvalidation_0-logloss:0.15236\n",
      "[260]\tvalidation_0-logloss:0.15231\n",
      "[261]\tvalidation_0-logloss:0.15228\n",
      "[262]\tvalidation_0-logloss:0.15225\n",
      "[263]\tvalidation_0-logloss:0.15223\n",
      "[264]\tvalidation_0-logloss:0.15221\n",
      "[265]\tvalidation_0-logloss:0.15219\n",
      "[266]\tvalidation_0-logloss:0.15214\n",
      "[267]\tvalidation_0-logloss:0.15212\n",
      "[268]\tvalidation_0-logloss:0.15210\n",
      "[269]\tvalidation_0-logloss:0.15209\n",
      "[270]\tvalidation_0-logloss:0.15207\n",
      "[271]\tvalidation_0-logloss:0.15204\n",
      "[272]\tvalidation_0-logloss:0.15201\n",
      "[273]\tvalidation_0-logloss:0.15199\n",
      "[274]\tvalidation_0-logloss:0.15197\n",
      "[275]\tvalidation_0-logloss:0.15194\n",
      "[276]\tvalidation_0-logloss:0.15192\n",
      "[277]\tvalidation_0-logloss:0.15190\n",
      "[278]\tvalidation_0-logloss:0.15188\n",
      "[279]\tvalidation_0-logloss:0.15185\n",
      "[280]\tvalidation_0-logloss:0.15183\n",
      "[281]\tvalidation_0-logloss:0.15181\n",
      "[282]\tvalidation_0-logloss:0.15178\n",
      "[283]\tvalidation_0-logloss:0.15176\n",
      "[284]\tvalidation_0-logloss:0.15172\n",
      "[285]\tvalidation_0-logloss:0.15170\n",
      "[286]\tvalidation_0-logloss:0.15168\n",
      "[287]\tvalidation_0-logloss:0.15167\n",
      "[288]\tvalidation_0-logloss:0.15164\n",
      "[289]\tvalidation_0-logloss:0.15163\n",
      "[290]\tvalidation_0-logloss:0.15162\n",
      "[291]\tvalidation_0-logloss:0.15161\n",
      "[292]\tvalidation_0-logloss:0.15160\n",
      "[293]\tvalidation_0-logloss:0.15158\n",
      "[294]\tvalidation_0-logloss:0.15156\n",
      "[295]\tvalidation_0-logloss:0.15155\n",
      "[296]\tvalidation_0-logloss:0.15152\n",
      "[297]\tvalidation_0-logloss:0.15148\n",
      "[298]\tvalidation_0-logloss:0.15147\n",
      "[299]\tvalidation_0-logloss:0.15145\n",
      "[300]\tvalidation_0-logloss:0.15144\n",
      "[301]\tvalidation_0-logloss:0.15142\n",
      "[302]\tvalidation_0-logloss:0.15140\n",
      "[303]\tvalidation_0-logloss:0.15137\n",
      "[304]\tvalidation_0-logloss:0.15137\n",
      "[305]\tvalidation_0-logloss:0.15136\n",
      "[306]\tvalidation_0-logloss:0.15134\n",
      "[307]\tvalidation_0-logloss:0.15132\n",
      "[308]\tvalidation_0-logloss:0.15129\n",
      "[309]\tvalidation_0-logloss:0.15127\n",
      "[310]\tvalidation_0-logloss:0.15126\n",
      "[311]\tvalidation_0-logloss:0.15124\n",
      "[312]\tvalidation_0-logloss:0.15123\n",
      "[313]\tvalidation_0-logloss:0.15121\n",
      "[314]\tvalidation_0-logloss:0.15118\n",
      "[315]\tvalidation_0-logloss:0.15117\n",
      "[316]\tvalidation_0-logloss:0.15115\n",
      "[317]\tvalidation_0-logloss:0.15113\n",
      "[318]\tvalidation_0-logloss:0.15112\n",
      "[319]\tvalidation_0-logloss:0.15111\n",
      "[320]\tvalidation_0-logloss:0.15108\n",
      "[321]\tvalidation_0-logloss:0.15107\n",
      "[322]\tvalidation_0-logloss:0.15106\n",
      "[323]\tvalidation_0-logloss:0.15104\n",
      "[324]\tvalidation_0-logloss:0.15103\n",
      "[325]\tvalidation_0-logloss:0.15102\n",
      "[326]\tvalidation_0-logloss:0.15102\n",
      "[327]\tvalidation_0-logloss:0.15100\n",
      "[328]\tvalidation_0-logloss:0.15098\n",
      "[329]\tvalidation_0-logloss:0.15095\n",
      "[330]\tvalidation_0-logloss:0.15095\n",
      "[331]\tvalidation_0-logloss:0.15094\n",
      "[332]\tvalidation_0-logloss:0.15092\n",
      "[333]\tvalidation_0-logloss:0.15091\n",
      "[334]\tvalidation_0-logloss:0.15090\n",
      "[335]\tvalidation_0-logloss:0.15089\n",
      "[336]\tvalidation_0-logloss:0.15087\n",
      "[337]\tvalidation_0-logloss:0.15085\n",
      "[338]\tvalidation_0-logloss:0.15083\n",
      "[339]\tvalidation_0-logloss:0.15082\n",
      "[340]\tvalidation_0-logloss:0.15080\n",
      "[341]\tvalidation_0-logloss:0.15079\n",
      "[342]\tvalidation_0-logloss:0.15078\n",
      "[343]\tvalidation_0-logloss:0.15077\n",
      "[344]\tvalidation_0-logloss:0.15076\n",
      "[345]\tvalidation_0-logloss:0.15076\n",
      "[346]\tvalidation_0-logloss:0.15074\n",
      "[347]\tvalidation_0-logloss:0.15070\n",
      "[348]\tvalidation_0-logloss:0.15070\n",
      "[349]\tvalidation_0-logloss:0.15069\n",
      "[350]\tvalidation_0-logloss:0.15068\n",
      "[351]\tvalidation_0-logloss:0.15067\n",
      "[352]\tvalidation_0-logloss:0.15065\n",
      "[353]\tvalidation_0-logloss:0.15062\n",
      "[354]\tvalidation_0-logloss:0.15061\n",
      "[355]\tvalidation_0-logloss:0.15061\n",
      "[356]\tvalidation_0-logloss:0.15060\n",
      "[357]\tvalidation_0-logloss:0.15059\n",
      "[358]\tvalidation_0-logloss:0.15059\n",
      "[359]\tvalidation_0-logloss:0.15057\n",
      "[360]\tvalidation_0-logloss:0.15057\n",
      "[361]\tvalidation_0-logloss:0.15056\n",
      "[362]\tvalidation_0-logloss:0.15055\n",
      "[363]\tvalidation_0-logloss:0.15053\n",
      "[364]\tvalidation_0-logloss:0.15051\n",
      "[365]\tvalidation_0-logloss:0.15049\n",
      "[366]\tvalidation_0-logloss:0.15048\n",
      "[367]\tvalidation_0-logloss:0.15047\n",
      "[368]\tvalidation_0-logloss:0.15046\n",
      "[369]\tvalidation_0-logloss:0.15044\n",
      "[370]\tvalidation_0-logloss:0.15044\n",
      "[371]\tvalidation_0-logloss:0.15043\n",
      "[372]\tvalidation_0-logloss:0.15042\n",
      "[373]\tvalidation_0-logloss:0.15041\n",
      "[374]\tvalidation_0-logloss:0.15040\n",
      "[375]\tvalidation_0-logloss:0.15040\n",
      "[376]\tvalidation_0-logloss:0.15038\n",
      "[377]\tvalidation_0-logloss:0.15039\n",
      "[378]\tvalidation_0-logloss:0.15038\n",
      "[379]\tvalidation_0-logloss:0.15038\n",
      "[380]\tvalidation_0-logloss:0.15036\n",
      "[381]\tvalidation_0-logloss:0.15033\n",
      "[382]\tvalidation_0-logloss:0.15031\n",
      "[383]\tvalidation_0-logloss:0.15029\n",
      "[384]\tvalidation_0-logloss:0.15029\n",
      "[385]\tvalidation_0-logloss:0.15028\n",
      "[386]\tvalidation_0-logloss:0.15027\n",
      "[387]\tvalidation_0-logloss:0.15026\n",
      "[388]\tvalidation_0-logloss:0.15023\n",
      "[389]\tvalidation_0-logloss:0.15022\n",
      "[390]\tvalidation_0-logloss:0.15022\n",
      "[391]\tvalidation_0-logloss:0.15022\n",
      "[392]\tvalidation_0-logloss:0.15020\n",
      "[393]\tvalidation_0-logloss:0.15020\n",
      "[394]\tvalidation_0-logloss:0.15020\n",
      "[395]\tvalidation_0-logloss:0.15018\n",
      "[396]\tvalidation_0-logloss:0.15018\n",
      "[397]\tvalidation_0-logloss:0.15016\n",
      "[398]\tvalidation_0-logloss:0.15015\n",
      "[399]\tvalidation_0-logloss:0.15015\n",
      "[400]\tvalidation_0-logloss:0.15015\n",
      "[401]\tvalidation_0-logloss:0.15012\n",
      "[402]\tvalidation_0-logloss:0.15009\n",
      "[403]\tvalidation_0-logloss:0.15009\n",
      "[404]\tvalidation_0-logloss:0.15008\n",
      "[405]\tvalidation_0-logloss:0.15007\n",
      "[406]\tvalidation_0-logloss:0.15006\n",
      "[407]\tvalidation_0-logloss:0.15004\n",
      "[408]\tvalidation_0-logloss:0.15003\n",
      "[409]\tvalidation_0-logloss:0.15003\n",
      "[410]\tvalidation_0-logloss:0.15001\n",
      "[411]\tvalidation_0-logloss:0.15001\n",
      "[412]\tvalidation_0-logloss:0.15000\n",
      "[413]\tvalidation_0-logloss:0.14999\n",
      "[414]\tvalidation_0-logloss:0.14999\n",
      "[415]\tvalidation_0-logloss:0.14998\n",
      "[416]\tvalidation_0-logloss:0.14995\n",
      "[417]\tvalidation_0-logloss:0.14994\n",
      "[418]\tvalidation_0-logloss:0.14995\n",
      "[419]\tvalidation_0-logloss:0.14995\n",
      "[420]\tvalidation_0-logloss:0.14994\n",
      "[421]\tvalidation_0-logloss:0.14994\n",
      "[422]\tvalidation_0-logloss:0.14992\n",
      "[423]\tvalidation_0-logloss:0.14992\n",
      "[424]\tvalidation_0-logloss:0.14990\n",
      "[425]\tvalidation_0-logloss:0.14990\n",
      "[426]\tvalidation_0-logloss:0.14988\n",
      "[427]\tvalidation_0-logloss:0.14987\n",
      "[428]\tvalidation_0-logloss:0.14986\n",
      "[429]\tvalidation_0-logloss:0.14986\n",
      "[430]\tvalidation_0-logloss:0.14986\n",
      "[431]\tvalidation_0-logloss:0.14983\n",
      "[432]\tvalidation_0-logloss:0.14982\n",
      "[433]\tvalidation_0-logloss:0.14981\n",
      "[434]\tvalidation_0-logloss:0.14978\n",
      "[435]\tvalidation_0-logloss:0.14978\n",
      "[436]\tvalidation_0-logloss:0.14977\n",
      "[437]\tvalidation_0-logloss:0.14976\n",
      "[438]\tvalidation_0-logloss:0.14976\n",
      "[439]\tvalidation_0-logloss:0.14976\n",
      "[440]\tvalidation_0-logloss:0.14975\n",
      "[441]\tvalidation_0-logloss:0.14975\n",
      "[442]\tvalidation_0-logloss:0.14972\n",
      "[443]\tvalidation_0-logloss:0.14972\n",
      "[444]\tvalidation_0-logloss:0.14969\n",
      "[445]\tvalidation_0-logloss:0.14969\n",
      "[446]\tvalidation_0-logloss:0.14968\n",
      "[447]\tvalidation_0-logloss:0.14968\n",
      "[448]\tvalidation_0-logloss:0.14966\n",
      "[449]\tvalidation_0-logloss:0.14966\n",
      "[450]\tvalidation_0-logloss:0.14965\n",
      "[451]\tvalidation_0-logloss:0.14964\n",
      "[452]\tvalidation_0-logloss:0.14963\n",
      "[453]\tvalidation_0-logloss:0.14962\n",
      "[454]\tvalidation_0-logloss:0.14961\n",
      "[455]\tvalidation_0-logloss:0.14960\n",
      "[456]\tvalidation_0-logloss:0.14960\n",
      "[457]\tvalidation_0-logloss:0.14958\n",
      "[458]\tvalidation_0-logloss:0.14958\n",
      "[459]\tvalidation_0-logloss:0.14958\n",
      "[460]\tvalidation_0-logloss:0.14957\n",
      "[461]\tvalidation_0-logloss:0.14957\n",
      "[462]\tvalidation_0-logloss:0.14956\n",
      "[463]\tvalidation_0-logloss:0.14955\n",
      "[464]\tvalidation_0-logloss:0.14953\n",
      "[465]\tvalidation_0-logloss:0.14952\n",
      "[466]\tvalidation_0-logloss:0.14951\n",
      "[467]\tvalidation_0-logloss:0.14951\n",
      "[468]\tvalidation_0-logloss:0.14950\n",
      "[469]\tvalidation_0-logloss:0.14948\n",
      "[470]\tvalidation_0-logloss:0.14948\n",
      "[471]\tvalidation_0-logloss:0.14948\n",
      "[472]\tvalidation_0-logloss:0.14947\n",
      "[473]\tvalidation_0-logloss:0.14946\n",
      "[474]\tvalidation_0-logloss:0.14945\n",
      "[475]\tvalidation_0-logloss:0.14945\n",
      "[476]\tvalidation_0-logloss:0.14945\n",
      "[477]\tvalidation_0-logloss:0.14945\n",
      "[478]\tvalidation_0-logloss:0.14945\n",
      "[479]\tvalidation_0-logloss:0.14945\n",
      "[480]\tvalidation_0-logloss:0.14945\n",
      "[481]\tvalidation_0-logloss:0.14945\n",
      "[482]\tvalidation_0-logloss:0.14943\n",
      "[483]\tvalidation_0-logloss:0.14943\n",
      "[484]\tvalidation_0-logloss:0.14942\n",
      "[485]\tvalidation_0-logloss:0.14942\n",
      "[486]\tvalidation_0-logloss:0.14941\n",
      "[487]\tvalidation_0-logloss:0.14940\n",
      "[488]\tvalidation_0-logloss:0.14941\n",
      "[489]\tvalidation_0-logloss:0.14939\n",
      "[490]\tvalidation_0-logloss:0.14939\n",
      "[491]\tvalidation_0-logloss:0.14938\n",
      "[492]\tvalidation_0-logloss:0.14937\n",
      "[493]\tvalidation_0-logloss:0.14937\n",
      "[494]\tvalidation_0-logloss:0.14935\n",
      "[495]\tvalidation_0-logloss:0.14935\n",
      "[496]\tvalidation_0-logloss:0.14934\n",
      "[497]\tvalidation_0-logloss:0.14934\n",
      "[498]\tvalidation_0-logloss:0.14934\n",
      "[499]\tvalidation_0-logloss:0.14932\n",
      "[500]\tvalidation_0-logloss:0.14932\n",
      "[501]\tvalidation_0-logloss:0.14932\n",
      "[502]\tvalidation_0-logloss:0.14931\n",
      "[503]\tvalidation_0-logloss:0.14931\n",
      "[504]\tvalidation_0-logloss:0.14930\n",
      "[505]\tvalidation_0-logloss:0.14930\n",
      "[506]\tvalidation_0-logloss:0.14929\n",
      "[507]\tvalidation_0-logloss:0.14928\n",
      "[508]\tvalidation_0-logloss:0.14927\n",
      "[509]\tvalidation_0-logloss:0.14927\n",
      "[510]\tvalidation_0-logloss:0.14925\n",
      "[511]\tvalidation_0-logloss:0.14926\n",
      "[512]\tvalidation_0-logloss:0.14926\n",
      "[513]\tvalidation_0-logloss:0.14924\n",
      "[514]\tvalidation_0-logloss:0.14924\n",
      "[515]\tvalidation_0-logloss:0.14922\n",
      "[516]\tvalidation_0-logloss:0.14921\n",
      "[517]\tvalidation_0-logloss:0.14920\n",
      "[518]\tvalidation_0-logloss:0.14919\n",
      "[519]\tvalidation_0-logloss:0.14919\n",
      "[520]\tvalidation_0-logloss:0.14919\n",
      "[521]\tvalidation_0-logloss:0.14918\n",
      "[522]\tvalidation_0-logloss:0.14917\n",
      "[523]\tvalidation_0-logloss:0.14915\n",
      "[524]\tvalidation_0-logloss:0.14915\n",
      "[525]\tvalidation_0-logloss:0.14915\n",
      "[526]\tvalidation_0-logloss:0.14915\n",
      "[527]\tvalidation_0-logloss:0.14914\n",
      "[528]\tvalidation_0-logloss:0.14913\n",
      "[529]\tvalidation_0-logloss:0.14913\n",
      "[530]\tvalidation_0-logloss:0.14913\n",
      "[531]\tvalidation_0-logloss:0.14913\n",
      "[532]\tvalidation_0-logloss:0.14911\n",
      "[533]\tvalidation_0-logloss:0.14910\n",
      "[534]\tvalidation_0-logloss:0.14910\n",
      "[535]\tvalidation_0-logloss:0.14909\n",
      "[536]\tvalidation_0-logloss:0.14908\n",
      "[537]\tvalidation_0-logloss:0.14908\n",
      "[538]\tvalidation_0-logloss:0.14906\n",
      "[539]\tvalidation_0-logloss:0.14906\n",
      "[540]\tvalidation_0-logloss:0.14906\n",
      "[541]\tvalidation_0-logloss:0.14904\n",
      "[542]\tvalidation_0-logloss:0.14904\n",
      "[543]\tvalidation_0-logloss:0.14902\n",
      "[544]\tvalidation_0-logloss:0.14902\n",
      "[545]\tvalidation_0-logloss:0.14902\n",
      "[546]\tvalidation_0-logloss:0.14902\n",
      "[547]\tvalidation_0-logloss:0.14902\n",
      "[548]\tvalidation_0-logloss:0.14902\n",
      "[549]\tvalidation_0-logloss:0.14902\n",
      "[550]\tvalidation_0-logloss:0.14901\n",
      "[551]\tvalidation_0-logloss:0.14900\n",
      "[552]\tvalidation_0-logloss:0.14900\n",
      "[553]\tvalidation_0-logloss:0.14900\n",
      "[554]\tvalidation_0-logloss:0.14899\n",
      "[555]\tvalidation_0-logloss:0.14899\n",
      "[556]\tvalidation_0-logloss:0.14899\n",
      "[557]\tvalidation_0-logloss:0.14898\n",
      "[558]\tvalidation_0-logloss:0.14897\n",
      "[559]\tvalidation_0-logloss:0.14897\n",
      "[560]\tvalidation_0-logloss:0.14897\n",
      "[561]\tvalidation_0-logloss:0.14897\n",
      "[562]\tvalidation_0-logloss:0.14897\n",
      "[563]\tvalidation_0-logloss:0.14897\n",
      "[564]\tvalidation_0-logloss:0.14897\n",
      "[565]\tvalidation_0-logloss:0.14896\n",
      "[566]\tvalidation_0-logloss:0.14895\n",
      "[567]\tvalidation_0-logloss:0.14894\n",
      "[568]\tvalidation_0-logloss:0.14892\n",
      "[569]\tvalidation_0-logloss:0.14892\n",
      "[570]\tvalidation_0-logloss:0.14892\n",
      "[571]\tvalidation_0-logloss:0.14890\n",
      "[572]\tvalidation_0-logloss:0.14890\n",
      "[573]\tvalidation_0-logloss:0.14890\n",
      "[574]\tvalidation_0-logloss:0.14891\n",
      "[575]\tvalidation_0-logloss:0.14890\n",
      "[576]\tvalidation_0-logloss:0.14888\n",
      "[577]\tvalidation_0-logloss:0.14888\n",
      "[578]\tvalidation_0-logloss:0.14888\n",
      "[579]\tvalidation_0-logloss:0.14886\n",
      "[580]\tvalidation_0-logloss:0.14886\n",
      "[581]\tvalidation_0-logloss:0.14885\n",
      "[582]\tvalidation_0-logloss:0.14885\n",
      "[583]\tvalidation_0-logloss:0.14884\n",
      "[584]\tvalidation_0-logloss:0.14884\n",
      "[585]\tvalidation_0-logloss:0.14884\n",
      "[586]\tvalidation_0-logloss:0.14883\n",
      "[587]\tvalidation_0-logloss:0.14883\n",
      "[588]\tvalidation_0-logloss:0.14883\n",
      "[589]\tvalidation_0-logloss:0.14882\n",
      "[590]\tvalidation_0-logloss:0.14881\n",
      "[591]\tvalidation_0-logloss:0.14880\n",
      "[592]\tvalidation_0-logloss:0.14879\n",
      "[593]\tvalidation_0-logloss:0.14879\n",
      "[594]\tvalidation_0-logloss:0.14878\n",
      "[595]\tvalidation_0-logloss:0.14878\n",
      "[596]\tvalidation_0-logloss:0.14878\n",
      "[597]\tvalidation_0-logloss:0.14877\n",
      "[598]\tvalidation_0-logloss:0.14877\n",
      "[599]\tvalidation_0-logloss:0.14876\n",
      "[600]\tvalidation_0-logloss:0.14876\n",
      "[601]\tvalidation_0-logloss:0.14875\n",
      "[602]\tvalidation_0-logloss:0.14875\n",
      "[603]\tvalidation_0-logloss:0.14874\n",
      "[604]\tvalidation_0-logloss:0.14874\n",
      "[605]\tvalidation_0-logloss:0.14873\n",
      "[606]\tvalidation_0-logloss:0.14873\n",
      "[607]\tvalidation_0-logloss:0.14872\n",
      "[608]\tvalidation_0-logloss:0.14872\n",
      "[609]\tvalidation_0-logloss:0.14872\n",
      "[610]\tvalidation_0-logloss:0.14872\n",
      "[611]\tvalidation_0-logloss:0.14872\n",
      "[612]\tvalidation_0-logloss:0.14872\n",
      "[613]\tvalidation_0-logloss:0.14871\n",
      "[614]\tvalidation_0-logloss:0.14871\n",
      "[615]\tvalidation_0-logloss:0.14871\n",
      "[616]\tvalidation_0-logloss:0.14871\n",
      "[617]\tvalidation_0-logloss:0.14871\n",
      "[618]\tvalidation_0-logloss:0.14870\n",
      "[619]\tvalidation_0-logloss:0.14870\n",
      "[620]\tvalidation_0-logloss:0.14868\n",
      "[621]\tvalidation_0-logloss:0.14869\n",
      "[622]\tvalidation_0-logloss:0.14868\n",
      "[623]\tvalidation_0-logloss:0.14868\n",
      "[624]\tvalidation_0-logloss:0.14868\n",
      "[625]\tvalidation_0-logloss:0.14868\n",
      "[626]\tvalidation_0-logloss:0.14868\n",
      "[627]\tvalidation_0-logloss:0.14867\n",
      "[628]\tvalidation_0-logloss:0.14868\n",
      "[629]\tvalidation_0-logloss:0.14868\n",
      "[630]\tvalidation_0-logloss:0.14867\n",
      "[631]\tvalidation_0-logloss:0.14867\n",
      "[632]\tvalidation_0-logloss:0.14868\n",
      "[633]\tvalidation_0-logloss:0.14868\n",
      "[634]\tvalidation_0-logloss:0.14868\n",
      "[635]\tvalidation_0-logloss:0.14866\n",
      "[636]\tvalidation_0-logloss:0.14865\n",
      "[637]\tvalidation_0-logloss:0.14865\n",
      "[638]\tvalidation_0-logloss:0.14865\n",
      "[639]\tvalidation_0-logloss:0.14864\n",
      "[640]\tvalidation_0-logloss:0.14864\n",
      "[641]\tvalidation_0-logloss:0.14863\n",
      "[642]\tvalidation_0-logloss:0.14863\n",
      "[643]\tvalidation_0-logloss:0.14862\n",
      "[644]\tvalidation_0-logloss:0.14862\n",
      "[645]\tvalidation_0-logloss:0.14862\n",
      "[646]\tvalidation_0-logloss:0.14862\n",
      "[647]\tvalidation_0-logloss:0.14862\n",
      "[648]\tvalidation_0-logloss:0.14861\n",
      "[649]\tvalidation_0-logloss:0.14860\n",
      "[650]\tvalidation_0-logloss:0.14859\n",
      "[651]\tvalidation_0-logloss:0.14859\n",
      "[652]\tvalidation_0-logloss:0.14859\n",
      "[653]\tvalidation_0-logloss:0.14858\n",
      "[654]\tvalidation_0-logloss:0.14857\n",
      "[655]\tvalidation_0-logloss:0.14858\n",
      "[656]\tvalidation_0-logloss:0.14858\n",
      "[657]\tvalidation_0-logloss:0.14857\n",
      "[658]\tvalidation_0-logloss:0.14857\n",
      "[659]\tvalidation_0-logloss:0.14857\n",
      "[660]\tvalidation_0-logloss:0.14856\n",
      "[661]\tvalidation_0-logloss:0.14857\n",
      "[662]\tvalidation_0-logloss:0.14856\n",
      "[663]\tvalidation_0-logloss:0.14856\n",
      "[664]\tvalidation_0-logloss:0.14856\n",
      "[665]\tvalidation_0-logloss:0.14855\n",
      "[666]\tvalidation_0-logloss:0.14854\n",
      "[667]\tvalidation_0-logloss:0.14854\n",
      "[668]\tvalidation_0-logloss:0.14854\n",
      "[669]\tvalidation_0-logloss:0.14853\n",
      "[670]\tvalidation_0-logloss:0.14853\n",
      "[671]\tvalidation_0-logloss:0.14853\n",
      "[672]\tvalidation_0-logloss:0.14853\n",
      "[673]\tvalidation_0-logloss:0.14853\n",
      "[674]\tvalidation_0-logloss:0.14854\n",
      "[675]\tvalidation_0-logloss:0.14853\n",
      "[676]\tvalidation_0-logloss:0.14852\n",
      "[677]\tvalidation_0-logloss:0.14852\n",
      "[678]\tvalidation_0-logloss:0.14851\n",
      "[679]\tvalidation_0-logloss:0.14851\n",
      "[680]\tvalidation_0-logloss:0.14851\n",
      "[681]\tvalidation_0-logloss:0.14851\n",
      "[682]\tvalidation_0-logloss:0.14851\n",
      "[683]\tvalidation_0-logloss:0.14850\n",
      "[684]\tvalidation_0-logloss:0.14850\n",
      "[685]\tvalidation_0-logloss:0.14849\n",
      "[686]\tvalidation_0-logloss:0.14849\n",
      "[687]\tvalidation_0-logloss:0.14850\n",
      "[688]\tvalidation_0-logloss:0.14850\n",
      "[689]\tvalidation_0-logloss:0.14849\n",
      "[690]\tvalidation_0-logloss:0.14849\n",
      "[691]\tvalidation_0-logloss:0.14848\n",
      "[692]\tvalidation_0-logloss:0.14848\n",
      "[693]\tvalidation_0-logloss:0.14848\n",
      "[694]\tvalidation_0-logloss:0.14848\n",
      "[695]\tvalidation_0-logloss:0.14848\n",
      "[696]\tvalidation_0-logloss:0.14847\n",
      "[697]\tvalidation_0-logloss:0.14847\n",
      "[698]\tvalidation_0-logloss:0.14847\n",
      "[699]\tvalidation_0-logloss:0.14847\n",
      "[700]\tvalidation_0-logloss:0.14847\n",
      "[701]\tvalidation_0-logloss:0.14846\n",
      "[702]\tvalidation_0-logloss:0.14846\n",
      "[703]\tvalidation_0-logloss:0.14846\n",
      "[704]\tvalidation_0-logloss:0.14845\n",
      "[705]\tvalidation_0-logloss:0.14846\n",
      "[706]\tvalidation_0-logloss:0.14846\n",
      "[707]\tvalidation_0-logloss:0.14846\n",
      "[708]\tvalidation_0-logloss:0.14845\n",
      "[709]\tvalidation_0-logloss:0.14846\n",
      "Score:  0.9412224591329069\n",
      "Accuracy Score:  0.9400379057095475\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "xgbc = XGBClassifier(n_estimators=1000, learning_rate=.05, max_depth=3, verbosity=0)\n",
    "xgbc.fit(X_train_preprocessed, y_train, early_stopping_rounds=5, eval_set=[(X_test_preprocessed, y_test)])\n",
    "\n",
    "print('Score: ', xgbc.score(X_train_preprocessed, y_train))\n",
    "\n",
    "predictions = xgbc.predict(X_test_preprocessed)\n",
    "\n",
    "print('Accuracy Score: ', accuracy_score(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d481fc1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:56.563546Z",
     "iopub.status.busy": "2024-11-11T22:42:56.563135Z",
     "iopub.status.idle": "2024-11-11T22:42:56.913275Z",
     "shell.execute_reply": "2024-11-11T22:42:56.912191Z"
    },
    "papermill": {
     "duration": 0.405483,
     "end_time": "2024-11-11T22:42:56.915626",
     "exception": false,
     "start_time": "2024-11-11T22:42:56.510143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Depression</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>140700</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>140701</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>140702</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140703</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>140704</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93795</th>\n",
       "      <td>234495</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93796</th>\n",
       "      <td>234496</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93797</th>\n",
       "      <td>234497</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93798</th>\n",
       "      <td>234498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93799</th>\n",
       "      <td>234499</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93800 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           id  Depression\n",
       "0      140700           0\n",
       "1      140701           0\n",
       "2      140702           0\n",
       "3      140703           1\n",
       "4      140704           0\n",
       "...       ...         ...\n",
       "93795  234495           0\n",
       "93796  234496           1\n",
       "93797  234497           0\n",
       "93798  234498           1\n",
       "93799  234499           0\n",
       "\n",
       "[93800 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sublesson = pd.DataFrame()\n",
    "sublesson['id'] = test.id\n",
    "\n",
    "predictions = xgbc.predict(test_preprocessed)\n",
    "\n",
    "sublesson['Depression'] = predictions\n",
    "sublesson.to_csv('PS_S4E11.csv', index=False)\n",
    "\n",
    "sublesson"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "869a7fec",
   "metadata": {
    "papermill": {
     "duration": 0.051531,
     "end_time": "2024-11-11T22:42:57.021986",
     "exception": false,
     "start_time": "2024-11-11T22:42:56.970455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Public Score: .91513"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3bede3e",
   "metadata": {
    "papermill": {
     "duration": 0.051429,
     "end_time": "2024-11-11T22:42:57.125284",
     "exception": false,
     "start_time": "2024-11-11T22:42:57.073855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Currently trying to improve my XGBoost score since I know that this is supposed to have advantages over other models...\n",
    "Best Public Score: .92401"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7d6bdf53",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-11-11T22:42:57.232144Z",
     "iopub.status.busy": "2024-11-11T22:42:57.230948Z",
     "iopub.status.idle": "2024-11-11T22:43:24.553341Z",
     "shell.execute_reply": "2024-11-11T22:43:24.551782Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 27.378258,
     "end_time": "2024-11-11T22:43:24.555797",
     "exception": false,
     "start_time": "2024-11-11T22:42:57.177539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-11-11 22:42:57,470] A new study created in memory with name: no-name-4f20d5b2-5a76-49ed-8678-c9885a4e6284\n",
      "[I 2024-11-11 22:42:57,667] Trial 0 finished with value: 0.8949301113480218 and parameters: {'booster': 'gbtree', 'lambda': 0.01904697061232981, 'alpha': 0.06103103079958032, 'subsample': 0.15834427405019166, 'colsampe_bytree': 0.1933312780938093}. Best is trial 0 with value: 0.8949301113480218.\n",
      "[I 2024-11-11 22:42:58,038] Trial 1 finished with value: 0.9338308457711443 and parameters: {'booster': 'dart', 'lambda': 0.09064295472687367, 'alpha': 0.11228857404507772, 'subsample': 0.8417827375115404, 'colsampe_bytree': 0.6319728692606046}. Best is trial 1 with value: 0.9338308457711443.\n",
      "[I 2024-11-11 22:42:58,400] Trial 2 finished with value: 0.9334280976072021 and parameters: {'booster': 'dart', 'lambda': 0.022749118461093343, 'alpha': 0.06734306632414402, 'subsample': 0.540093742843359, 'colsampe_bytree': 0.538430120602517}. Best is trial 1 with value: 0.9338308457711443.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:42:58] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:42:58,559] Trial 3 finished with value: 0.8171286425017769 and parameters: {'booster': 'gblinear', 'lambda': 0.61266093687146, 'alpha': 0.3601895514370265, 'subsample': 0.4483026106419017, 'colsampe_bytree': 0.34426373137448396}. Best is trial 1 with value: 0.9338308457711443.\n",
      "[I 2024-11-11 22:42:58,931] Trial 4 finished with value: 0.9327173655531864 and parameters: {'booster': 'dart', 'lambda': 0.05453543131473123, 'alpha': 0.301005335555107, 'subsample': 0.3138050715805454, 'colsampe_bytree': 0.5118088307706697}. Best is trial 1 with value: 0.9338308457711443.\n",
      "[I 2024-11-11 22:42:59,293] Trial 5 finished with value: 0.9340203743188817 and parameters: {'booster': 'dart', 'lambda': 0.01715787506051146, 'alpha': 0.08214912586369622, 'subsample': 0.33017353874235467, 'colsampe_bytree': 0.6438373861037782}. Best is trial 5 with value: 0.9340203743188817.\n",
      "[I 2024-11-11 22:42:59,651] Trial 6 finished with value: 0.9357024401800521 and parameters: {'booster': 'dart', 'lambda': 0.06989271695478809, 'alpha': 0.010120875659944947, 'subsample': 0.4299258701544633, 'colsampe_bytree': 0.6892353150859024}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:00,015] Trial 7 finished with value: 0.9211561241411987 and parameters: {'booster': 'dart', 'lambda': 0.24491870327201024, 'alpha': 0.030333858874387224, 'subsample': 0.9802423105326021, 'colsampe_bytree': 0.3901198482200026}. Best is trial 6 with value: 0.9357024401800521.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:00] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:00,177] Trial 8 finished with value: 0.888012319355603 and parameters: {'booster': 'gblinear', 'lambda': 0.056615635806902764, 'alpha': 0.033634116768445785, 'subsample': 0.43493941441774614, 'colsampe_bytree': 0.5714804100810259}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:00,370] Trial 9 finished with value: 0.897607202084814 and parameters: {'booster': 'gbtree', 'lambda': 0.03477561384667209, 'alpha': 0.12309598896072879, 'subsample': 0.7644928692624089, 'colsampe_bytree': 0.22414122015790855}. Best is trial 6 with value: 0.9357024401800521.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:00] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:00,551] Trial 10 finished with value: 0.8685145700071073 and parameters: {'booster': 'gblinear', 'lambda': 0.23347077863472554, 'alpha': 0.010838836907082391, 'subsample': 0.6451833456216308, 'colsampe_bytree': 0.9693738242823146}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:00,932] Trial 11 finished with value: 0.9289031035299692 and parameters: {'booster': 'dart', 'lambda': 0.010243514477137458, 'alpha': 0.8562344359061606, 'subsample': 0.015487627373416302, 'colsampe_bytree': 0.7603301718005282}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:01,318] Trial 12 finished with value: 0.9353707652215115 and parameters: {'booster': 'dart', 'lambda': 0.010646245369097024, 'alpha': 0.013369349765146733, 'subsample': 0.24826488180322726, 'colsampe_bytree': 0.8103349361539363}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:01,700] Trial 13 finished with value: 0.93529969201611 and parameters: {'booster': 'dart', 'lambda': 0.17346210525550623, 'alpha': 0.011511675523341123, 'subsample': 0.20466633241005994, 'colsampe_bytree': 0.8641266282624132}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:02,079] Trial 14 finished with value: 0.9346363420990287 and parameters: {'booster': 'dart', 'lambda': 0.8584880169904822, 'alpha': 0.021247504074224762, 'subsample': 0.11346342019984909, 'colsampe_bytree': 0.8082871974155035}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:02,292] Trial 15 finished with value: 0.9350153991945037 and parameters: {'booster': 'gbtree', 'lambda': 0.010095868823437076, 'alpha': 0.020528227401584723, 'subsample': 0.30960428479091684, 'colsampe_bytree': 0.956154379388733}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:02,637] Trial 16 finished with value: 0.8592513622364368 and parameters: {'booster': 'dart', 'lambda': 0.10186186882128874, 'alpha': 0.010716320978810095, 'subsample': 0.6497325663098266, 'colsampe_bytree': 0.036084089820021314}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:03,124] Trial 17 finished with value: 0.9352760009476427 and parameters: {'booster': 'dart', 'lambda': 0.47849506993289054, 'alpha': 0.03621410175620302, 'subsample': 0.5491271717837282, 'colsampe_bytree': 0.6846772649375106}. Best is trial 6 with value: 0.9357024401800521.\n",
      "[I 2024-11-11 22:43:03,335] Trial 18 finished with value: 0.9357261312485193 and parameters: {'booster': 'gbtree', 'lambda': 0.03717846042424618, 'alpha': 0.01720158596525064, 'subsample': 0.24224539868932998, 'colsampe_bytree': 0.7707269471750404}. Best is trial 18 with value: 0.9357261312485193.\n",
      "[I 2024-11-11 22:43:03,544] Trial 19 finished with value: 0.9250177683013504 and parameters: {'booster': 'gbtree', 'lambda': 0.03918047365381605, 'alpha': 0.021310786610093113, 'subsample': 0.391118652213724, 'colsampe_bytree': 0.41390974400846253}. Best is trial 18 with value: 0.9357261312485193.\n",
      "[I 2024-11-11 22:43:03,748] Trial 20 finished with value: 0.9339729921819474 and parameters: {'booster': 'gbtree', 'lambda': 0.10819621333196097, 'alpha': 0.016568193060656964, 'subsample': 0.08237053447296044, 'colsampe_bytree': 0.720118379823855}. Best is trial 18 with value: 0.9357261312485193.\n",
      "[I 2024-11-11 22:43:03,959] Trial 21 finished with value: 0.9356550580431178 and parameters: {'booster': 'gbtree', 'lambda': 0.027838361526303368, 'alpha': 0.015131711785093203, 'subsample': 0.23843632835252998, 'colsampe_bytree': 0.8743948544367861}. Best is trial 18 with value: 0.9357261312485193.\n",
      "[I 2024-11-11 22:43:04,175] Trial 22 finished with value: 0.9353707652215115 and parameters: {'booster': 'gbtree', 'lambda': 0.032724296146638195, 'alpha': 0.04591256544926533, 'subsample': 0.26171412956563256, 'colsampe_bytree': 0.8919256813546559}. Best is trial 18 with value: 0.9357261312485193.\n",
      "[I 2024-11-11 22:43:04,387] Trial 23 finished with value: 0.9358445865908552 and parameters: {'booster': 'gbtree', 'lambda': 0.047713767264491135, 'alpha': 0.02552458142846988, 'subsample': 0.37281210657911923, 'colsampe_bytree': 0.874463187068264}. Best is trial 23 with value: 0.9358445865908552.\n",
      "[I 2024-11-11 22:43:04,601] Trial 24 finished with value: 0.936199952617863 and parameters: {'booster': 'gbtree', 'lambda': 0.06197298053633964, 'alpha': 0.029092055405628838, 'subsample': 0.4784850365946495, 'colsampe_bytree': 0.7228202683671884}. Best is trial 24 with value: 0.936199952617863.\n",
      "[I 2024-11-11 22:43:04,826] Trial 25 finished with value: 0.9362473347547975 and parameters: {'booster': 'gbtree', 'lambda': 0.14190282770991167, 'alpha': 0.1631711981946589, 'subsample': 0.5949235172864327, 'colsampe_bytree': 0.988455987476166}. Best is trial 25 with value: 0.9362473347547975.\n",
      "[I 2024-11-11 22:43:05,039] Trial 26 finished with value: 0.935820895522388 and parameters: {'booster': 'gbtree', 'lambda': 0.13784972403371676, 'alpha': 0.19675435114929757, 'subsample': 0.618869441771418, 'colsampe_bytree': 0.991579827088234}. Best is trial 25 with value: 0.9362473347547975.\n",
      "[I 2024-11-11 22:43:05,250] Trial 27 finished with value: 0.9367448471926084 and parameters: {'booster': 'gbtree', 'lambda': 0.0713863753252713, 'alpha': 0.19765104531586777, 'subsample': 0.7293787716788113, 'colsampe_bytree': 0.9174807046632663}. Best is trial 27 with value: 0.9367448471926084.\n",
      "[I 2024-11-11 22:43:05,464] Trial 28 finished with value: 0.9370528310826818 and parameters: {'booster': 'gbtree', 'lambda': 0.3173519575341884, 'alpha': 0.17456790289663016, 'subsample': 0.77483689889172, 'colsampe_bytree': 0.9262162986293282}. Best is trial 28 with value: 0.9370528310826818.\n",
      "[I 2024-11-11 22:43:05,678] Trial 29 finished with value: 0.9369343757403459 and parameters: {'booster': 'gbtree', 'lambda': 0.34507596389605594, 'alpha': 0.18420294556533381, 'subsample': 0.7886921799939851, 'colsampe_bytree': 0.9323642167428353}. Best is trial 28 with value: 0.9370528310826818.\n",
      "[I 2024-11-11 22:43:05,889] Trial 30 finished with value: 0.936318407960199 and parameters: {'booster': 'gbtree', 'lambda': 0.3423637320969178, 'alpha': 0.4630397157766275, 'subsample': 0.7465065223017666, 'colsampe_bytree': 0.9133232012745571}. Best is trial 28 with value: 0.9370528310826818.\n",
      "[I 2024-11-11 22:43:06,104] Trial 31 finished with value: 0.9361525704809287 and parameters: {'booster': 'gbtree', 'lambda': 0.33679840019821045, 'alpha': 0.5442931160425187, 'subsample': 0.7486315750447832, 'colsampe_bytree': 0.926254417463455}. Best is trial 28 with value: 0.9370528310826818.\n",
      "[I 2024-11-11 22:43:06,315] Trial 32 finished with value: 0.9375977256574272 and parameters: {'booster': 'gbtree', 'lambda': 0.3761982800665965, 'alpha': 0.25333726286050107, 'subsample': 0.9060420024289292, 'colsampe_bytree': 0.8213192068104822}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:06,524] Trial 33 finished with value: 0.9365790097133381 and parameters: {'booster': 'gbtree', 'lambda': 0.489580002383918, 'alpha': 0.22561515345614774, 'subsample': 0.9498240922698004, 'colsampe_bytree': 0.8226214845487717}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:06,737] Trial 34 finished with value: 0.9361762615493959 and parameters: {'booster': 'gbtree', 'lambda': 0.7753552725697533, 'alpha': 0.11873328649288936, 'subsample': 0.8778572710198845, 'colsampe_bytree': 0.8450493444640303}. Best is trial 32 with value: 0.9375977256574272.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:06] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:06,910] Trial 35 finished with value: 0.8171286425017769 and parameters: {'booster': 'gblinear', 'lambda': 0.3301734417787824, 'alpha': 0.276551398866506, 'subsample': 0.8292049384406819, 'colsampe_bytree': 0.9247608243745716}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:07,129] Trial 36 finished with value: 0.9341862117981521 and parameters: {'booster': 'gbtree', 'lambda': 0.2249428653841926, 'alpha': 0.15312274831920358, 'subsample': 0.8928527113091694, 'colsampe_bytree': 0.5747144632244034}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:07,345] Trial 37 finished with value: 0.936199952617863 and parameters: {'booster': 'gbtree', 'lambda': 0.5762811098437691, 'alpha': 0.06691134944702322, 'subsample': 0.7042198277271547, 'colsampe_bytree': 0.7794839499016217}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:07,554] Trial 38 finished with value: 0.9345889599620943 and parameters: {'booster': 'gbtree', 'lambda': 0.40386448180268875, 'alpha': 0.360481083032984, 'subsample': 0.8170657797134444, 'colsampe_bytree': 0.6437575671067669}. Best is trial 32 with value: 0.9375977256574272.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:07] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:07,728] Trial 39 finished with value: 0.8176024638711206 and parameters: {'booster': 'gblinear', 'lambda': 0.1828551627004652, 'alpha': 0.0796805278100234, 'subsample': 0.9093466953447292, 'colsampe_bytree': 0.9435427310666421}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:07,956] Trial 40 finished with value: 0.9357024401800521 and parameters: {'booster': 'gbtree', 'lambda': 0.07804323328332934, 'alpha': 0.09725112728991948, 'subsample': 0.8030221029648373, 'colsampe_bytree': 0.9983855799347479}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:08,171] Trial 41 finished with value: 0.936199952617863 and parameters: {'booster': 'gbtree', 'lambda': 0.6224218128115601, 'alpha': 0.21375859191898575, 'subsample': 0.9860074384586333, 'colsampe_bytree': 0.8249813636336271}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:08,382] Trial 42 finished with value: 0.9357735133854537 and parameters: {'booster': 'gbtree', 'lambda': 0.46291332696662374, 'alpha': 0.24378763778381535, 'subsample': 0.941735620644605, 'colsampe_bytree': 0.8943634421682052}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:08,594] Trial 43 finished with value: 0.9363657900971334 and parameters: {'booster': 'gbtree', 'lambda': 0.2659844045085306, 'alpha': 0.16312391608756774, 'subsample': 0.8718300193031919, 'colsampe_bytree': 0.8375592634995367}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:08,796] Trial 44 finished with value: 0.9248282397536128 and parameters: {'booster': 'gbtree', 'lambda': 0.6445204163432896, 'alpha': 0.35394260207360756, 'subsample': 0.9405384113595687, 'colsampe_bytree': 0.46398124258395174}. Best is trial 32 with value: 0.9375977256574272.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:08] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:08,967] Trial 45 finished with value: 0.8171286425017769 and parameters: {'booster': 'gblinear', 'lambda': 0.2839204863129461, 'alpha': 0.13440448053242646, 'subsample': 0.7049701700537843, 'colsampe_bytree': 0.7475232343826806}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:09,190] Trial 46 finished with value: 0.9353470741530443 and parameters: {'booster': 'gbtree', 'lambda': 0.4679438668101361, 'alpha': 0.1993857134276593, 'subsample': 0.7862554268368117, 'colsampe_bytree': 0.6860226005710934}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:09,394] Trial 47 finished with value: 0.9135039090262971 and parameters: {'booster': 'gbtree', 'lambda': 0.9862367842925526, 'alpha': 0.5619709618279357, 'subsample': 0.7081176573835207, 'colsampe_bytree': 0.23994937170660935}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:09,602] Trial 48 finished with value: 0.9340677564558162 and parameters: {'booster': 'gbtree', 'lambda': 0.21405599876169212, 'alpha': 0.2911709766859403, 'subsample': 0.8568300888265754, 'colsampe_bytree': 0.5929908520366366}. Best is trial 32 with value: 0.9375977256574272.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:09] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:09,771] Trial 49 finished with value: 0.8171286425017769 and parameters: {'booster': 'gblinear', 'lambda': 0.38976322639033945, 'alpha': 0.10033461998581292, 'subsample': 0.9421203383306568, 'colsampe_bytree': 0.8038000337119465}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:09,995] Trial 50 finished with value: 0.9356313669746505 and parameters: {'booster': 'gbtree', 'lambda': 0.11821741557679308, 'alpha': 0.3986243450067979, 'subsample': 0.6677273160903904, 'colsampe_bytree': 0.9543488460626598}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:10,209] Trial 51 finished with value: 0.9360341151385928 and parameters: {'booster': 'gbtree', 'lambda': 0.2672947716298206, 'alpha': 0.16172200166831982, 'subsample': 0.8417965080675073, 'colsampe_bytree': 0.8437497941532133}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:10,422] Trial 52 finished with value: 0.9360814972755271 and parameters: {'booster': 'gbtree', 'lambda': 0.18950650964752355, 'alpha': 0.23667151356187976, 'subsample': 0.9976339670762152, 'colsampe_bytree': 0.8428591847994864}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:10,631] Trial 53 finished with value: 0.9369817578772802 and parameters: {'booster': 'gbtree', 'lambda': 0.083493329213653, 'alpha': 0.1913710542294935, 'subsample': 0.9126369371347233, 'colsampe_bytree': 0.7927563828839477}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:10,843] Trial 54 finished with value: 0.9375740345889599 and parameters: {'booster': 'gbtree', 'lambda': 0.08560542910992232, 'alpha': 0.18003367835913467, 'subsample': 0.9056498915674176, 'colsampe_bytree': 0.7907512532546688}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:11,057] Trial 55 finished with value: 0.936697465055674 and parameters: {'booster': 'gbtree', 'lambda': 0.07963211910544024, 'alpha': 0.13507814268944332, 'subsample': 0.9109310123411626, 'colsampe_bytree': 0.7206371187853293}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:11,268] Trial 56 finished with value: 0.936199952617863 and parameters: {'booster': 'gbtree', 'lambda': 0.09310767802936576, 'alpha': 0.2828455375796168, 'subsample': 0.7786179619088879, 'colsampe_bytree': 0.7695949872359928}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:11,479] Trial 57 finished with value: 0.9365790097133381 and parameters: {'booster': 'gbtree', 'lambda': 0.04742751359884646, 'alpha': 0.1745792011310179, 'subsample': 0.7378015888125539, 'colsampe_bytree': 0.9014306166684387}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:11,863] Trial 58 finished with value: 0.9367685382610755 and parameters: {'booster': 'dart', 'lambda': 0.06212471910025184, 'alpha': 0.3406355197478129, 'subsample': 0.841890499740432, 'colsampe_bytree': 0.9460720401402684}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:12,253] Trial 59 finished with value: 0.9370528310826818 and parameters: {'booster': 'dart', 'lambda': 0.1369194434322607, 'alpha': 0.7275130869409204, 'subsample': 0.8142914470681555, 'colsampe_bytree': 0.9539702129217545}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:12,637] Trial 60 finished with value: 0.9364131722340677 and parameters: {'booster': 'dart', 'lambda': 0.1521037682524437, 'alpha': 0.9657473458705814, 'subsample': 0.5607085631629997, 'colsampe_bytree': 0.8752257804798093}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:13,081] Trial 61 finished with value: 0.9362236436863303 and parameters: {'booster': 'dart', 'lambda': 0.05770042965888716, 'alpha': 0.6842122687479582, 'subsample': 0.8620911979470764, 'colsampe_bytree': 0.9544218693062299}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:13,488] Trial 62 finished with value: 0.9357735133854537 and parameters: {'booster': 'dart', 'lambda': 0.1246057669407247, 'alpha': 0.7075622497130991, 'subsample': 0.9135942321653241, 'colsampe_bytree': 0.9717233732655886}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:13,873] Trial 63 finished with value: 0.9364605543710022 and parameters: {'booster': 'dart', 'lambda': 0.09729578174459576, 'alpha': 0.3451668247264069, 'subsample': 0.8031738759929578, 'colsampe_bytree': 0.7983675103816809}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:14,226] Trial 64 finished with value: 0.85939350864724 and parameters: {'booster': 'dart', 'lambda': 0.047211668458286206, 'alpha': 0.47910830659453696, 'subsample': 0.8281969966205387, 'colsampe_bytree': 0.07882651415420194}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:14,615] Trial 65 finished with value: 0.9358682776593225 and parameters: {'booster': 'dart', 'lambda': 0.06491099489236969, 'alpha': 0.25302633113754164, 'subsample': 0.9662361331245656, 'colsampe_bytree': 0.9351260134344404}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:15,004] Trial 66 finished with value: 0.9366027007818053 and parameters: {'booster': 'dart', 'lambda': 0.022008535574011483, 'alpha': 0.13794852070133778, 'subsample': 0.7788278861852366, 'colsampe_bytree': 0.8713091398947537}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:15,389] Trial 67 finished with value: 0.9177683013503909 and parameters: {'booster': 'dart', 'lambda': 0.08083725984791286, 'alpha': 0.31590390383499967, 'subsample': 0.9033485456961543, 'colsampe_bytree': 0.30441567487298626}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:15,775] Trial 68 finished with value: 0.9360341151385928 and parameters: {'booster': 'dart', 'lambda': 0.10864064021351379, 'alpha': 0.42168648256903635, 'subsample': 0.8440512554276068, 'colsampe_bytree': 0.7421142200683494}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:16,164] Trial 69 finished with value: 0.9359867330016584 and parameters: {'booster': 'dart', 'lambda': 0.14918341792567863, 'alpha': 0.10572210809316133, 'subsample': 0.6833663014564858, 'colsampe_bytree': 0.8999286587105126}. Best is trial 32 with value: 0.9375977256574272.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:16] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:16,336] Trial 70 finished with value: 0.8171286425017769 and parameters: {'booster': 'gblinear', 'lambda': 0.041572474353545046, 'alpha': 0.18660073363453314, 'subsample': 0.8816580265382086, 'colsampe_bytree': 0.977399166961511}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:16,560] Trial 71 finished with value: 0.9362473347547975 and parameters: {'booster': 'gbtree', 'lambda': 0.07898065313065489, 'alpha': 0.20794336846108166, 'subsample': 0.7250467675213924, 'colsampe_bytree': 0.9182696416089328}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:16,776] Trial 72 finished with value: 0.9352286188107084 and parameters: {'booster': 'gbtree', 'lambda': 0.05503358768016381, 'alpha': 0.08117511343676957, 'subsample': 0.8087598341526482, 'colsampe_bytree': 0.9466099571252693}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:16,988] Trial 73 finished with value: 0.9355129116323146 and parameters: {'booster': 'gbtree', 'lambda': 0.3858758228502953, 'alpha': 0.26663740417076864, 'subsample': 0.7720022314231791, 'colsampe_bytree': 0.8711103450310256}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:17,203] Trial 74 finished with value: 0.9361288794124615 and parameters: {'booster': 'gbtree', 'lambda': 0.06931550317506156, 'alpha': 0.14708115228374713, 'subsample': 0.9668618991850126, 'colsampe_bytree': 0.9969370579845156}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:17,417] Trial 75 finished with value: 0.9357261312485193 and parameters: {'booster': 'gbtree', 'lambda': 0.08901017734519086, 'alpha': 0.18039265777865998, 'subsample': 0.8535074991370255, 'colsampe_bytree': 0.7815453017399338}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:17,630] Trial 76 finished with value: 0.9358682776593225 and parameters: {'booster': 'gbtree', 'lambda': 0.014029387614459527, 'alpha': 0.12106307792450322, 'subsample': 0.9223534682783172, 'colsampe_bytree': 0.9184785327260799}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:18,017] Trial 77 finished with value: 0.935939350864724 and parameters: {'booster': 'dart', 'lambda': 0.07018624223079746, 'alpha': 0.31447231389109787, 'subsample': 0.7543062805874488, 'colsampe_bytree': 0.8536828902430149}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:18,233] Trial 78 finished with value: 0.9357261312485193 and parameters: {'booster': 'gbtree', 'lambda': 0.30602879295043345, 'alpha': 0.2349952239430261, 'subsample': 0.8888112387053448, 'colsampe_bytree': 0.9624941698715426}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:18,449] Trial 79 finished with value: 0.9362473347547975 and parameters: {'booster': 'gbtree', 'lambda': 0.02893182771938521, 'alpha': 0.05257459799701981, 'subsample': 0.6295494870354796, 'colsampe_bytree': 0.8199295753961802}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:18,657] Trial 80 finished with value: 0.9345652688936271 and parameters: {'booster': 'gbtree', 'lambda': 0.5301617514826724, 'alpha': 0.7007775216078858, 'subsample': 0.8234985206171574, 'colsampe_bytree': 0.6089262684330152}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:18,869] Trial 81 finished with value: 0.9356076759061833 and parameters: {'booster': 'gbtree', 'lambda': 0.08633335671751513, 'alpha': 0.12811106747523915, 'subsample': 0.9211084329507144, 'colsampe_bytree': 0.7391184384786093}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:19,087] Trial 82 finished with value: 0.9361288794124615 and parameters: {'booster': 'gbtree', 'lambda': 0.07246509467922739, 'alpha': 0.2090743259963601, 'subsample': 0.881594763004857, 'colsampe_bytree': 0.7084931000341821}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:19,299] Trial 83 finished with value: 0.9352523098791755 and parameters: {'booster': 'gbtree', 'lambda': 0.06178436585590071, 'alpha': 0.14825455934912246, 'subsample': 0.7941969066642376, 'colsampe_bytree': 0.6726360226662866}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:19,514] Trial 84 finished with value: 0.935820895522388 and parameters: {'booster': 'gbtree', 'lambda': 0.12862470051906644, 'alpha': 0.09020847952014963, 'subsample': 0.9626682348737162, 'colsampe_bytree': 0.8980699434371192}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:19,728] Trial 85 finished with value: 0.9328595119639895 and parameters: {'booster': 'gbtree', 'lambda': 0.10466929402210652, 'alpha': 0.1715450371374709, 'subsample': 0.4982009164445572, 'colsampe_bytree': 0.4971199710650367}. Best is trial 32 with value: 0.9375977256574272.\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [22:43:19] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"colsample_bytree\", \"subsample\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "[I 2024-11-11 22:43:19,901] Trial 86 finished with value: 0.8171286425017769 and parameters: {'booster': 'gblinear', 'lambda': 0.1627558483623754, 'alpha': 0.19259963552468606, 'subsample': 0.9231836882702207, 'colsampe_bytree': 0.7960160137594203}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:20,133] Trial 87 finished with value: 0.9354655294953802 and parameters: {'booster': 'gbtree', 'lambda': 0.20613147488824676, 'alpha': 0.1099952217715659, 'subsample': 0.857238014949768, 'colsampe_bytree': 0.6641182691684404}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:20,353] Trial 88 finished with value: 0.9360578062070599 and parameters: {'booster': 'gbtree', 'lambda': 0.05290754475966078, 'alpha': 0.2217159333839421, 'subsample': 0.730463598327743, 'colsampe_bytree': 0.9313567761506678}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:20,738] Trial 89 finished with value: 0.9366263918502724 and parameters: {'booster': 'dart', 'lambda': 0.4223520918058352, 'alpha': 0.1360716055455312, 'subsample': 0.9033486730707349, 'colsampe_bytree': 0.8782619786453018}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:20,952] Trial 90 finished with value: 0.9358919687277896 and parameters: {'booster': 'gbtree', 'lambda': 0.04359969863101108, 'alpha': 0.11686328187507578, 'subsample': 0.8270589016718535, 'colsampe_bytree': 0.8265928909635899}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:21,340] Trial 91 finished with value: 0.9361525704809287 and parameters: {'booster': 'dart', 'lambda': 0.3659158030845589, 'alpha': 0.1442490695312292, 'subsample': 0.8981923628255618, 'colsampe_bytree': 0.883057495732654}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:21,729] Trial 92 finished with value: 0.9367211561241412 and parameters: {'booster': 'dart', 'lambda': 0.3033881171536074, 'alpha': 0.1625524551183757, 'subsample': 0.9848832237034412, 'colsampe_bytree': 0.8573234202601845}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:22,119] Trial 93 finished with value: 0.9358682776593225 and parameters: {'booster': 'dart', 'lambda': 0.25200885356624825, 'alpha': 0.1662277375632634, 'subsample': 0.9863722924866651, 'colsampe_bytree': 0.8527482023000905}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:22,508] Trial 94 finished with value: 0.9360578062070599 and parameters: {'booster': 'dart', 'lambda': 0.2956974512603582, 'alpha': 0.1905614397489394, 'subsample': 0.9995544033475046, 'colsampe_bytree': 0.7558019376154307}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:22,904] Trial 95 finished with value: 0.9371475953565506 and parameters: {'booster': 'dart', 'lambda': 0.7173061377067305, 'alpha': 0.2511316751723405, 'subsample': 0.9485196207137923, 'colsampe_bytree': 0.7889878600523345}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:23,374] Trial 96 finished with value: 0.9363657900971334 and parameters: {'booster': 'dart', 'lambda': 0.32787257868298514, 'alpha': 0.25739105561054093, 'subsample': 0.9415001139502648, 'colsampe_bytree': 0.9093812568293349}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:23,761] Trial 97 finished with value: 0.9365316275764037 and parameters: {'booster': 'dart', 'lambda': 0.7710967292690998, 'alpha': 0.39192968853045906, 'subsample': 0.968382596183724, 'colsampe_bytree': 0.9703599640820849}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:24,156] Trial 98 finished with value: 0.9366500829187396 and parameters: {'booster': 'dart', 'lambda': 0.6774062755396312, 'alpha': 0.22700432325294548, 'subsample': 0.8652835475547697, 'colsampe_bytree': 0.7815361970305145}. Best is trial 32 with value: 0.9375977256574272.\n",
      "[I 2024-11-11 22:43:24,548] Trial 99 finished with value: 0.9360814972755271 and parameters: {'booster': 'dart', 'lambda': 0.5449324792789351, 'alpha': 0.5840666267958389, 'subsample': 0.7610877808447717, 'colsampe_bytree': 0.8118989263082399}. Best is trial 32 with value: 0.9375977256574272.\n"
     ]
    }
   ],
   "source": [
    "import optuna\n",
    "import xgboost as xgb\n",
    "\n",
    "def objective(trial):\n",
    "\n",
    "    dtrain = xgb.DMatrix(X_train_preprocessed, label=y_train)\n",
    "    dvalid = xgb.DMatrix(X_test_preprocessed, label=y_test)\n",
    "    \n",
    "    param = {\n",
    "        'objective': 'binary:logistic',\n",
    "        'booster': trial.suggest_categorical('booster', ['gbtree', 'gblinear', 'dart']),\n",
    "        'lambda': trial.suggest_float('lambda', 1e-2, 1.0, log=True),\n",
    "        'alpha': trial.suggest_float('alpha', 1e-2, 1.0, log=True),\n",
    "        'subsample': trial.suggest_float('subsample', 1e-2, 1.0),\n",
    "        'colsample_bytree': trial.suggest_float('colsampe_bytree', 1e-2, 1.0),\n",
    "    }\n",
    "\n",
    "    bst = xgb.train(param, dtrain)\n",
    "    preds = bst.predict(dvalid)\n",
    "    pred_labels = np.rint(preds)\n",
    "    accuracy = accuracy_score(y_test, pred_labels)\n",
    "\n",
    "    return accuracy\n",
    "\n",
    "study = optuna.create_study(direction='maximize')\n",
    "study.optimize(objective, n_trials=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5031d155",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:43:24.675155Z",
     "iopub.status.busy": "2024-11-11T22:43:24.674725Z",
     "iopub.status.idle": "2024-11-11T22:43:35.160937Z",
     "shell.execute_reply": "2024-11-11T22:43:35.159730Z"
    },
    "papermill": {
     "duration": 10.547974,
     "end_time": "2024-11-11T22:43:35.163203",
     "exception": false,
     "start_time": "2024-11-11T22:43:24.615229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tvalidation_0-logloss:0.45536\n",
      "[1]\tvalidation_0-logloss:0.43432\n",
      "[2]\tvalidation_0-logloss:0.41591\n",
      "[3]\tvalidation_0-logloss:0.39961\n",
      "[4]\tvalidation_0-logloss:0.38500\n",
      "[5]\tvalidation_0-logloss:0.37173\n",
      "[6]\tvalidation_0-logloss:0.35967\n",
      "[7]\tvalidation_0-logloss:0.34871\n",
      "[8]\tvalidation_0-logloss:0.33862\n",
      "[9]\tvalidation_0-logloss:0.32940\n",
      "[10]\tvalidation_0-logloss:0.32094\n",
      "[11]\tvalidation_0-logloss:0.31298\n",
      "[12]\tvalidation_0-logloss:0.30562\n",
      "[13]\tvalidation_0-logloss:0.29887\n",
      "[14]\tvalidation_0-logloss:0.29239\n",
      "[15]\tvalidation_0-logloss:0.28648\n",
      "[16]\tvalidation_0-logloss:0.28099\n",
      "[17]\tvalidation_0-logloss:0.27564\n",
      "[18]\tvalidation_0-logloss:0.27085\n",
      "[19]\tvalidation_0-logloss:0.26619\n",
      "[20]\tvalidation_0-logloss:0.26194\n",
      "[21]\tvalidation_0-logloss:0.25775\n",
      "[22]\tvalidation_0-logloss:0.25400\n",
      "[23]\tvalidation_0-logloss:0.25038\n",
      "[24]\tvalidation_0-logloss:0.24686\n",
      "[25]\tvalidation_0-logloss:0.24371\n",
      "[26]\tvalidation_0-logloss:0.24062\n",
      "[27]\tvalidation_0-logloss:0.23769\n",
      "[28]\tvalidation_0-logloss:0.23496\n",
      "[29]\tvalidation_0-logloss:0.23237\n",
      "[30]\tvalidation_0-logloss:0.22940\n",
      "[31]\tvalidation_0-logloss:0.22710\n",
      "[32]\tvalidation_0-logloss:0.22449\n",
      "[33]\tvalidation_0-logloss:0.22236\n",
      "[34]\tvalidation_0-logloss:0.22034\n",
      "[35]\tvalidation_0-logloss:0.21807\n",
      "[36]\tvalidation_0-logloss:0.21624\n",
      "[37]\tvalidation_0-logloss:0.21445\n",
      "[38]\tvalidation_0-logloss:0.21244\n",
      "[39]\tvalidation_0-logloss:0.21083\n",
      "[40]\tvalidation_0-logloss:0.20925\n",
      "[41]\tvalidation_0-logloss:0.20777\n",
      "[42]\tvalidation_0-logloss:0.20639\n",
      "[43]\tvalidation_0-logloss:0.20468\n",
      "[44]\tvalidation_0-logloss:0.20337\n",
      "[45]\tvalidation_0-logloss:0.20183\n",
      "[46]\tvalidation_0-logloss:0.20034\n",
      "[47]\tvalidation_0-logloss:0.19912\n",
      "[48]\tvalidation_0-logloss:0.19796\n",
      "[49]\tvalidation_0-logloss:0.19687\n",
      "[50]\tvalidation_0-logloss:0.19580\n",
      "[51]\tvalidation_0-logloss:0.19476\n",
      "[52]\tvalidation_0-logloss:0.19380\n",
      "[53]\tvalidation_0-logloss:0.19286\n",
      "[54]\tvalidation_0-logloss:0.19187\n",
      "[55]\tvalidation_0-logloss:0.19087\n",
      "[56]\tvalidation_0-logloss:0.19000\n",
      "[57]\tvalidation_0-logloss:0.18908\n",
      "[58]\tvalidation_0-logloss:0.18823\n",
      "[59]\tvalidation_0-logloss:0.18746\n",
      "[60]\tvalidation_0-logloss:0.18669\n",
      "[61]\tvalidation_0-logloss:0.18589\n",
      "[62]\tvalidation_0-logloss:0.18516\n",
      "[63]\tvalidation_0-logloss:0.18435\n",
      "[64]\tvalidation_0-logloss:0.18368\n",
      "[65]\tvalidation_0-logloss:0.18303\n",
      "[66]\tvalidation_0-logloss:0.18239\n",
      "[67]\tvalidation_0-logloss:0.18172\n",
      "[68]\tvalidation_0-logloss:0.18113\n",
      "[69]\tvalidation_0-logloss:0.18050\n",
      "[70]\tvalidation_0-logloss:0.17988\n",
      "[71]\tvalidation_0-logloss:0.17928\n",
      "[72]\tvalidation_0-logloss:0.17873\n",
      "[73]\tvalidation_0-logloss:0.17819\n",
      "[74]\tvalidation_0-logloss:0.17765\n",
      "[75]\tvalidation_0-logloss:0.17714\n",
      "[76]\tvalidation_0-logloss:0.17664\n",
      "[77]\tvalidation_0-logloss:0.17609\n",
      "[78]\tvalidation_0-logloss:0.17560\n",
      "[79]\tvalidation_0-logloss:0.17515\n",
      "[80]\tvalidation_0-logloss:0.17472\n",
      "[81]\tvalidation_0-logloss:0.17423\n",
      "[82]\tvalidation_0-logloss:0.17374\n",
      "[83]\tvalidation_0-logloss:0.17331\n",
      "[84]\tvalidation_0-logloss:0.17289\n",
      "[85]\tvalidation_0-logloss:0.17249\n",
      "[86]\tvalidation_0-logloss:0.17209\n",
      "[87]\tvalidation_0-logloss:0.17172\n",
      "[88]\tvalidation_0-logloss:0.17136\n",
      "[89]\tvalidation_0-logloss:0.17090\n",
      "[90]\tvalidation_0-logloss:0.17055\n",
      "[91]\tvalidation_0-logloss:0.17021\n",
      "[92]\tvalidation_0-logloss:0.16991\n",
      "[93]\tvalidation_0-logloss:0.16957\n",
      "[94]\tvalidation_0-logloss:0.16926\n",
      "[95]\tvalidation_0-logloss:0.16896\n",
      "[96]\tvalidation_0-logloss:0.16866\n",
      "[97]\tvalidation_0-logloss:0.16829\n",
      "[98]\tvalidation_0-logloss:0.16800\n",
      "[99]\tvalidation_0-logloss:0.16772\n",
      "[100]\tvalidation_0-logloss:0.16739\n",
      "[101]\tvalidation_0-logloss:0.16712\n",
      "[102]\tvalidation_0-logloss:0.16677\n",
      "[103]\tvalidation_0-logloss:0.16648\n",
      "[104]\tvalidation_0-logloss:0.16624\n",
      "[105]\tvalidation_0-logloss:0.16597\n",
      "[106]\tvalidation_0-logloss:0.16575\n",
      "[107]\tvalidation_0-logloss:0.16544\n",
      "[108]\tvalidation_0-logloss:0.16519\n",
      "[109]\tvalidation_0-logloss:0.16498\n",
      "[110]\tvalidation_0-logloss:0.16475\n",
      "[111]\tvalidation_0-logloss:0.16453\n",
      "[112]\tvalidation_0-logloss:0.16431\n",
      "[113]\tvalidation_0-logloss:0.16409\n",
      "[114]\tvalidation_0-logloss:0.16389\n",
      "[115]\tvalidation_0-logloss:0.16368\n",
      "[116]\tvalidation_0-logloss:0.16344\n",
      "[117]\tvalidation_0-logloss:0.16323\n",
      "[118]\tvalidation_0-logloss:0.16304\n",
      "[119]\tvalidation_0-logloss:0.16286\n",
      "[120]\tvalidation_0-logloss:0.16268\n",
      "[121]\tvalidation_0-logloss:0.16247\n",
      "[122]\tvalidation_0-logloss:0.16228\n",
      "[123]\tvalidation_0-logloss:0.16213\n",
      "[124]\tvalidation_0-logloss:0.16195\n",
      "[125]\tvalidation_0-logloss:0.16177\n",
      "[126]\tvalidation_0-logloss:0.16160\n",
      "[127]\tvalidation_0-logloss:0.16141\n",
      "[128]\tvalidation_0-logloss:0.16123\n",
      "[129]\tvalidation_0-logloss:0.16101\n",
      "[130]\tvalidation_0-logloss:0.16088\n",
      "[131]\tvalidation_0-logloss:0.16070\n",
      "[132]\tvalidation_0-logloss:0.16053\n",
      "[133]\tvalidation_0-logloss:0.16034\n",
      "[134]\tvalidation_0-logloss:0.16021\n",
      "[135]\tvalidation_0-logloss:0.16005\n",
      "[136]\tvalidation_0-logloss:0.15993\n",
      "[137]\tvalidation_0-logloss:0.15979\n",
      "[138]\tvalidation_0-logloss:0.15967\n",
      "[139]\tvalidation_0-logloss:0.15953\n",
      "[140]\tvalidation_0-logloss:0.15938\n",
      "[141]\tvalidation_0-logloss:0.15924\n",
      "[142]\tvalidation_0-logloss:0.15910\n",
      "[143]\tvalidation_0-logloss:0.15896\n",
      "[144]\tvalidation_0-logloss:0.15882\n",
      "[145]\tvalidation_0-logloss:0.15872\n",
      "[146]\tvalidation_0-logloss:0.15860\n",
      "[147]\tvalidation_0-logloss:0.15843\n",
      "[148]\tvalidation_0-logloss:0.15832\n",
      "[149]\tvalidation_0-logloss:0.15818\n",
      "[150]\tvalidation_0-logloss:0.15808\n",
      "[151]\tvalidation_0-logloss:0.15793\n",
      "[152]\tvalidation_0-logloss:0.15782\n",
      "[153]\tvalidation_0-logloss:0.15772\n",
      "[154]\tvalidation_0-logloss:0.15761\n",
      "[155]\tvalidation_0-logloss:0.15750\n",
      "[156]\tvalidation_0-logloss:0.15741\n",
      "[157]\tvalidation_0-logloss:0.15731\n",
      "[158]\tvalidation_0-logloss:0.15721\n",
      "[159]\tvalidation_0-logloss:0.15714\n",
      "[160]\tvalidation_0-logloss:0.15705\n",
      "[161]\tvalidation_0-logloss:0.15696\n",
      "[162]\tvalidation_0-logloss:0.15688\n",
      "[163]\tvalidation_0-logloss:0.15679\n",
      "[164]\tvalidation_0-logloss:0.15670\n",
      "[165]\tvalidation_0-logloss:0.15662\n",
      "[166]\tvalidation_0-logloss:0.15650\n",
      "[167]\tvalidation_0-logloss:0.15639\n",
      "[168]\tvalidation_0-logloss:0.15630\n",
      "[169]\tvalidation_0-logloss:0.15622\n",
      "[170]\tvalidation_0-logloss:0.15612\n",
      "[171]\tvalidation_0-logloss:0.15602\n",
      "[172]\tvalidation_0-logloss:0.15594\n",
      "[173]\tvalidation_0-logloss:0.15587\n",
      "[174]\tvalidation_0-logloss:0.15576\n",
      "[175]\tvalidation_0-logloss:0.15564\n",
      "[176]\tvalidation_0-logloss:0.15557\n",
      "[177]\tvalidation_0-logloss:0.15549\n",
      "[178]\tvalidation_0-logloss:0.15543\n",
      "[179]\tvalidation_0-logloss:0.15536\n",
      "[180]\tvalidation_0-logloss:0.15527\n",
      "[181]\tvalidation_0-logloss:0.15520\n",
      "[182]\tvalidation_0-logloss:0.15512\n",
      "[183]\tvalidation_0-logloss:0.15506\n",
      "[184]\tvalidation_0-logloss:0.15502\n",
      "[185]\tvalidation_0-logloss:0.15496\n",
      "[186]\tvalidation_0-logloss:0.15490\n",
      "[187]\tvalidation_0-logloss:0.15484\n",
      "[188]\tvalidation_0-logloss:0.15478\n",
      "[189]\tvalidation_0-logloss:0.15474\n",
      "[190]\tvalidation_0-logloss:0.15466\n",
      "[191]\tvalidation_0-logloss:0.15461\n",
      "[192]\tvalidation_0-logloss:0.15455\n",
      "[193]\tvalidation_0-logloss:0.15449\n",
      "[194]\tvalidation_0-logloss:0.15445\n",
      "[195]\tvalidation_0-logloss:0.15438\n",
      "[196]\tvalidation_0-logloss:0.15434\n",
      "[197]\tvalidation_0-logloss:0.15427\n",
      "[198]\tvalidation_0-logloss:0.15423\n",
      "[199]\tvalidation_0-logloss:0.15417\n",
      "[200]\tvalidation_0-logloss:0.15410\n",
      "[201]\tvalidation_0-logloss:0.15407\n",
      "[202]\tvalidation_0-logloss:0.15402\n",
      "[203]\tvalidation_0-logloss:0.15395\n",
      "[204]\tvalidation_0-logloss:0.15392\n",
      "[205]\tvalidation_0-logloss:0.15385\n",
      "[206]\tvalidation_0-logloss:0.15379\n",
      "[207]\tvalidation_0-logloss:0.15371\n",
      "[208]\tvalidation_0-logloss:0.15364\n",
      "[209]\tvalidation_0-logloss:0.15360\n",
      "[210]\tvalidation_0-logloss:0.15355\n",
      "[211]\tvalidation_0-logloss:0.15352\n",
      "[212]\tvalidation_0-logloss:0.15348\n",
      "[213]\tvalidation_0-logloss:0.15344\n",
      "[214]\tvalidation_0-logloss:0.15339\n",
      "[215]\tvalidation_0-logloss:0.15334\n",
      "[216]\tvalidation_0-logloss:0.15330\n",
      "[217]\tvalidation_0-logloss:0.15322\n",
      "[218]\tvalidation_0-logloss:0.15315\n",
      "[219]\tvalidation_0-logloss:0.15310\n",
      "[220]\tvalidation_0-logloss:0.15306\n",
      "[221]\tvalidation_0-logloss:0.15302\n",
      "[222]\tvalidation_0-logloss:0.15299\n",
      "[223]\tvalidation_0-logloss:0.15296\n",
      "[224]\tvalidation_0-logloss:0.15293\n",
      "[225]\tvalidation_0-logloss:0.15289\n",
      "[226]\tvalidation_0-logloss:0.15285\n",
      "[227]\tvalidation_0-logloss:0.15281\n",
      "[228]\tvalidation_0-logloss:0.15277\n",
      "[229]\tvalidation_0-logloss:0.15270\n",
      "[230]\tvalidation_0-logloss:0.15267\n",
      "[231]\tvalidation_0-logloss:0.15265\n",
      "[232]\tvalidation_0-logloss:0.15261\n",
      "[233]\tvalidation_0-logloss:0.15257\n",
      "[234]\tvalidation_0-logloss:0.15251\n",
      "[235]\tvalidation_0-logloss:0.15248\n",
      "[236]\tvalidation_0-logloss:0.15241\n",
      "[237]\tvalidation_0-logloss:0.15237\n",
      "[238]\tvalidation_0-logloss:0.15234\n",
      "[239]\tvalidation_0-logloss:0.15226\n",
      "[240]\tvalidation_0-logloss:0.15224\n",
      "[241]\tvalidation_0-logloss:0.15220\n",
      "[242]\tvalidation_0-logloss:0.15217\n",
      "[243]\tvalidation_0-logloss:0.15214\n",
      "[244]\tvalidation_0-logloss:0.15212\n",
      "[245]\tvalidation_0-logloss:0.15204\n",
      "[246]\tvalidation_0-logloss:0.15202\n",
      "[247]\tvalidation_0-logloss:0.15199\n",
      "[248]\tvalidation_0-logloss:0.15198\n",
      "[249]\tvalidation_0-logloss:0.15195\n",
      "[250]\tvalidation_0-logloss:0.15193\n",
      "[251]\tvalidation_0-logloss:0.15191\n",
      "[252]\tvalidation_0-logloss:0.15189\n",
      "[253]\tvalidation_0-logloss:0.15187\n",
      "[254]\tvalidation_0-logloss:0.15185\n",
      "[255]\tvalidation_0-logloss:0.15183\n",
      "[256]\tvalidation_0-logloss:0.15180\n",
      "[257]\tvalidation_0-logloss:0.15175\n",
      "[258]\tvalidation_0-logloss:0.15172\n",
      "[259]\tvalidation_0-logloss:0.15169\n",
      "[260]\tvalidation_0-logloss:0.15167\n",
      "[261]\tvalidation_0-logloss:0.15163\n",
      "[262]\tvalidation_0-logloss:0.15162\n",
      "[263]\tvalidation_0-logloss:0.15160\n",
      "[264]\tvalidation_0-logloss:0.15157\n",
      "[265]\tvalidation_0-logloss:0.15154\n",
      "[266]\tvalidation_0-logloss:0.15152\n",
      "[267]\tvalidation_0-logloss:0.15150\n",
      "[268]\tvalidation_0-logloss:0.15148\n",
      "[269]\tvalidation_0-logloss:0.15142\n",
      "[270]\tvalidation_0-logloss:0.15140\n",
      "[271]\tvalidation_0-logloss:0.15139\n",
      "[272]\tvalidation_0-logloss:0.15136\n",
      "[273]\tvalidation_0-logloss:0.15134\n",
      "[274]\tvalidation_0-logloss:0.15131\n",
      "[275]\tvalidation_0-logloss:0.15129\n",
      "[276]\tvalidation_0-logloss:0.15127\n",
      "[277]\tvalidation_0-logloss:0.15123\n",
      "[278]\tvalidation_0-logloss:0.15118\n",
      "[279]\tvalidation_0-logloss:0.15117\n",
      "[280]\tvalidation_0-logloss:0.15115\n",
      "[281]\tvalidation_0-logloss:0.15114\n",
      "[282]\tvalidation_0-logloss:0.15111\n",
      "[283]\tvalidation_0-logloss:0.15109\n",
      "[284]\tvalidation_0-logloss:0.15108\n",
      "[285]\tvalidation_0-logloss:0.15107\n",
      "[286]\tvalidation_0-logloss:0.15105\n",
      "[287]\tvalidation_0-logloss:0.15104\n",
      "[288]\tvalidation_0-logloss:0.15101\n",
      "[289]\tvalidation_0-logloss:0.15099\n",
      "[290]\tvalidation_0-logloss:0.15093\n",
      "[291]\tvalidation_0-logloss:0.15090\n",
      "[292]\tvalidation_0-logloss:0.15086\n",
      "[293]\tvalidation_0-logloss:0.15084\n",
      "[294]\tvalidation_0-logloss:0.15082\n",
      "[295]\tvalidation_0-logloss:0.15081\n",
      "[296]\tvalidation_0-logloss:0.15076\n",
      "[297]\tvalidation_0-logloss:0.15073\n",
      "[298]\tvalidation_0-logloss:0.15070\n",
      "[299]\tvalidation_0-logloss:0.15067\n",
      "[300]\tvalidation_0-logloss:0.15066\n",
      "[301]\tvalidation_0-logloss:0.15064\n",
      "[302]\tvalidation_0-logloss:0.15063\n",
      "[303]\tvalidation_0-logloss:0.15062\n",
      "[304]\tvalidation_0-logloss:0.15060\n",
      "[305]\tvalidation_0-logloss:0.15058\n",
      "[306]\tvalidation_0-logloss:0.15057\n",
      "[307]\tvalidation_0-logloss:0.15055\n",
      "[308]\tvalidation_0-logloss:0.15053\n",
      "[309]\tvalidation_0-logloss:0.15052\n",
      "[310]\tvalidation_0-logloss:0.15051\n",
      "[311]\tvalidation_0-logloss:0.15049\n",
      "[312]\tvalidation_0-logloss:0.15048\n",
      "[313]\tvalidation_0-logloss:0.15047\n",
      "[314]\tvalidation_0-logloss:0.15044\n",
      "[315]\tvalidation_0-logloss:0.15043\n",
      "[316]\tvalidation_0-logloss:0.15041\n",
      "[317]\tvalidation_0-logloss:0.15039\n",
      "[318]\tvalidation_0-logloss:0.15039\n",
      "[319]\tvalidation_0-logloss:0.15037\n",
      "[320]\tvalidation_0-logloss:0.15036\n",
      "[321]\tvalidation_0-logloss:0.15034\n",
      "[322]\tvalidation_0-logloss:0.15033\n",
      "[323]\tvalidation_0-logloss:0.15032\n",
      "[324]\tvalidation_0-logloss:0.15029\n",
      "[325]\tvalidation_0-logloss:0.15027\n",
      "[326]\tvalidation_0-logloss:0.15027\n",
      "[327]\tvalidation_0-logloss:0.15025\n",
      "[328]\tvalidation_0-logloss:0.15024\n",
      "[329]\tvalidation_0-logloss:0.15023\n",
      "[330]\tvalidation_0-logloss:0.15022\n",
      "[331]\tvalidation_0-logloss:0.15020\n",
      "[332]\tvalidation_0-logloss:0.15018\n",
      "[333]\tvalidation_0-logloss:0.15013\n",
      "[334]\tvalidation_0-logloss:0.15013\n",
      "[335]\tvalidation_0-logloss:0.15012\n",
      "[336]\tvalidation_0-logloss:0.15011\n",
      "[337]\tvalidation_0-logloss:0.15011\n",
      "[338]\tvalidation_0-logloss:0.15011\n",
      "[339]\tvalidation_0-logloss:0.15010\n",
      "[340]\tvalidation_0-logloss:0.15009\n",
      "[341]\tvalidation_0-logloss:0.15007\n",
      "[342]\tvalidation_0-logloss:0.15007\n",
      "[343]\tvalidation_0-logloss:0.15004\n",
      "[344]\tvalidation_0-logloss:0.15003\n",
      "[345]\tvalidation_0-logloss:0.15002\n",
      "[346]\tvalidation_0-logloss:0.15002\n",
      "[347]\tvalidation_0-logloss:0.14999\n",
      "[348]\tvalidation_0-logloss:0.14998\n",
      "[349]\tvalidation_0-logloss:0.14996\n",
      "[350]\tvalidation_0-logloss:0.14995\n",
      "[351]\tvalidation_0-logloss:0.14994\n",
      "[352]\tvalidation_0-logloss:0.14993\n",
      "[353]\tvalidation_0-logloss:0.14992\n",
      "[354]\tvalidation_0-logloss:0.14991\n",
      "[355]\tvalidation_0-logloss:0.14989\n",
      "[356]\tvalidation_0-logloss:0.14988\n",
      "[357]\tvalidation_0-logloss:0.14986\n",
      "[358]\tvalidation_0-logloss:0.14986\n",
      "[359]\tvalidation_0-logloss:0.14984\n",
      "[360]\tvalidation_0-logloss:0.14984\n",
      "[361]\tvalidation_0-logloss:0.14984\n",
      "[362]\tvalidation_0-logloss:0.14982\n",
      "[363]\tvalidation_0-logloss:0.14981\n",
      "[364]\tvalidation_0-logloss:0.14977\n",
      "[365]\tvalidation_0-logloss:0.14976\n",
      "[366]\tvalidation_0-logloss:0.14975\n",
      "[367]\tvalidation_0-logloss:0.14973\n",
      "[368]\tvalidation_0-logloss:0.14971\n",
      "[369]\tvalidation_0-logloss:0.14969\n",
      "[370]\tvalidation_0-logloss:0.14968\n",
      "[371]\tvalidation_0-logloss:0.14968\n",
      "[372]\tvalidation_0-logloss:0.14967\n",
      "[373]\tvalidation_0-logloss:0.14967\n",
      "[374]\tvalidation_0-logloss:0.14965\n",
      "[375]\tvalidation_0-logloss:0.14964\n",
      "[376]\tvalidation_0-logloss:0.14963\n",
      "[377]\tvalidation_0-logloss:0.14962\n",
      "[378]\tvalidation_0-logloss:0.14962\n",
      "[379]\tvalidation_0-logloss:0.14962\n",
      "[380]\tvalidation_0-logloss:0.14961\n",
      "[381]\tvalidation_0-logloss:0.14960\n",
      "[382]\tvalidation_0-logloss:0.14958\n",
      "[383]\tvalidation_0-logloss:0.14956\n",
      "[384]\tvalidation_0-logloss:0.14956\n",
      "[385]\tvalidation_0-logloss:0.14955\n",
      "[386]\tvalidation_0-logloss:0.14954\n",
      "[387]\tvalidation_0-logloss:0.14953\n",
      "[388]\tvalidation_0-logloss:0.14951\n",
      "[389]\tvalidation_0-logloss:0.14950\n",
      "[390]\tvalidation_0-logloss:0.14949\n",
      "[391]\tvalidation_0-logloss:0.14947\n",
      "[392]\tvalidation_0-logloss:0.14946\n",
      "[393]\tvalidation_0-logloss:0.14944\n",
      "[394]\tvalidation_0-logloss:0.14944\n",
      "[395]\tvalidation_0-logloss:0.14942\n",
      "[396]\tvalidation_0-logloss:0.14941\n",
      "[397]\tvalidation_0-logloss:0.14940\n",
      "[398]\tvalidation_0-logloss:0.14940\n",
      "[399]\tvalidation_0-logloss:0.14938\n",
      "[400]\tvalidation_0-logloss:0.14937\n",
      "[401]\tvalidation_0-logloss:0.14937\n",
      "[402]\tvalidation_0-logloss:0.14936\n",
      "[403]\tvalidation_0-logloss:0.14936\n",
      "[404]\tvalidation_0-logloss:0.14935\n",
      "[405]\tvalidation_0-logloss:0.14934\n",
      "[406]\tvalidation_0-logloss:0.14934\n",
      "[407]\tvalidation_0-logloss:0.14932\n",
      "[408]\tvalidation_0-logloss:0.14932\n",
      "[409]\tvalidation_0-logloss:0.14930\n",
      "[410]\tvalidation_0-logloss:0.14929\n",
      "[411]\tvalidation_0-logloss:0.14929\n",
      "[412]\tvalidation_0-logloss:0.14928\n",
      "[413]\tvalidation_0-logloss:0.14928\n",
      "[414]\tvalidation_0-logloss:0.14928\n",
      "[415]\tvalidation_0-logloss:0.14926\n",
      "[416]\tvalidation_0-logloss:0.14926\n",
      "[417]\tvalidation_0-logloss:0.14923\n",
      "[418]\tvalidation_0-logloss:0.14923\n",
      "[419]\tvalidation_0-logloss:0.14922\n",
      "[420]\tvalidation_0-logloss:0.14920\n",
      "[421]\tvalidation_0-logloss:0.14919\n",
      "[422]\tvalidation_0-logloss:0.14919\n",
      "[423]\tvalidation_0-logloss:0.14919\n",
      "[424]\tvalidation_0-logloss:0.14918\n",
      "[425]\tvalidation_0-logloss:0.14917\n",
      "[426]\tvalidation_0-logloss:0.14916\n",
      "[427]\tvalidation_0-logloss:0.14915\n",
      "[428]\tvalidation_0-logloss:0.14915\n",
      "[429]\tvalidation_0-logloss:0.14914\n",
      "[430]\tvalidation_0-logloss:0.14913\n",
      "[431]\tvalidation_0-logloss:0.14913\n",
      "[432]\tvalidation_0-logloss:0.14913\n",
      "[433]\tvalidation_0-logloss:0.14912\n",
      "[434]\tvalidation_0-logloss:0.14911\n",
      "[435]\tvalidation_0-logloss:0.14911\n",
      "[436]\tvalidation_0-logloss:0.14910\n",
      "[437]\tvalidation_0-logloss:0.14909\n",
      "[438]\tvalidation_0-logloss:0.14906\n",
      "[439]\tvalidation_0-logloss:0.14905\n",
      "[440]\tvalidation_0-logloss:0.14904\n",
      "[441]\tvalidation_0-logloss:0.14904\n",
      "[442]\tvalidation_0-logloss:0.14904\n",
      "[443]\tvalidation_0-logloss:0.14903\n",
      "[444]\tvalidation_0-logloss:0.14903\n",
      "[445]\tvalidation_0-logloss:0.14901\n",
      "[446]\tvalidation_0-logloss:0.14901\n",
      "[447]\tvalidation_0-logloss:0.14901\n",
      "[448]\tvalidation_0-logloss:0.14899\n",
      "[449]\tvalidation_0-logloss:0.14898\n",
      "[450]\tvalidation_0-logloss:0.14896\n",
      "[451]\tvalidation_0-logloss:0.14894\n",
      "[452]\tvalidation_0-logloss:0.14893\n",
      "[453]\tvalidation_0-logloss:0.14893\n",
      "[454]\tvalidation_0-logloss:0.14892\n",
      "[455]\tvalidation_0-logloss:0.14892\n",
      "[456]\tvalidation_0-logloss:0.14890\n",
      "[457]\tvalidation_0-logloss:0.14890\n",
      "[458]\tvalidation_0-logloss:0.14890\n",
      "[459]\tvalidation_0-logloss:0.14890\n",
      "[460]\tvalidation_0-logloss:0.14889\n",
      "[461]\tvalidation_0-logloss:0.14888\n",
      "[462]\tvalidation_0-logloss:0.14886\n",
      "[463]\tvalidation_0-logloss:0.14885\n",
      "[464]\tvalidation_0-logloss:0.14884\n",
      "[465]\tvalidation_0-logloss:0.14884\n",
      "[466]\tvalidation_0-logloss:0.14883\n",
      "[467]\tvalidation_0-logloss:0.14883\n",
      "[468]\tvalidation_0-logloss:0.14881\n",
      "[469]\tvalidation_0-logloss:0.14882\n",
      "[470]\tvalidation_0-logloss:0.14882\n",
      "[471]\tvalidation_0-logloss:0.14882\n",
      "[472]\tvalidation_0-logloss:0.14881\n",
      "[473]\tvalidation_0-logloss:0.14880\n",
      "[474]\tvalidation_0-logloss:0.14880\n",
      "[475]\tvalidation_0-logloss:0.14879\n",
      "[476]\tvalidation_0-logloss:0.14877\n",
      "[477]\tvalidation_0-logloss:0.14876\n",
      "[478]\tvalidation_0-logloss:0.14875\n",
      "[479]\tvalidation_0-logloss:0.14875\n",
      "[480]\tvalidation_0-logloss:0.14875\n",
      "[481]\tvalidation_0-logloss:0.14874\n",
      "[482]\tvalidation_0-logloss:0.14874\n",
      "[483]\tvalidation_0-logloss:0.14873\n",
      "[484]\tvalidation_0-logloss:0.14872\n",
      "[485]\tvalidation_0-logloss:0.14871\n",
      "[486]\tvalidation_0-logloss:0.14871\n",
      "[487]\tvalidation_0-logloss:0.14871\n",
      "[488]\tvalidation_0-logloss:0.14870\n",
      "[489]\tvalidation_0-logloss:0.14869\n",
      "[490]\tvalidation_0-logloss:0.14868\n",
      "[491]\tvalidation_0-logloss:0.14867\n",
      "[492]\tvalidation_0-logloss:0.14867\n",
      "[493]\tvalidation_0-logloss:0.14866\n",
      "[494]\tvalidation_0-logloss:0.14867\n",
      "[495]\tvalidation_0-logloss:0.14865\n",
      "[496]\tvalidation_0-logloss:0.14865\n",
      "[497]\tvalidation_0-logloss:0.14865\n",
      "[498]\tvalidation_0-logloss:0.14864\n",
      "[499]\tvalidation_0-logloss:0.14863\n",
      "[500]\tvalidation_0-logloss:0.14863\n",
      "[501]\tvalidation_0-logloss:0.14863\n",
      "[502]\tvalidation_0-logloss:0.14863\n",
      "[503]\tvalidation_0-logloss:0.14862\n",
      "[504]\tvalidation_0-logloss:0.14862\n",
      "[505]\tvalidation_0-logloss:0.14860\n",
      "[506]\tvalidation_0-logloss:0.14860\n",
      "[507]\tvalidation_0-logloss:0.14860\n",
      "[508]\tvalidation_0-logloss:0.14859\n",
      "[509]\tvalidation_0-logloss:0.14859\n",
      "[510]\tvalidation_0-logloss:0.14859\n",
      "[511]\tvalidation_0-logloss:0.14859\n",
      "[512]\tvalidation_0-logloss:0.14858\n",
      "[513]\tvalidation_0-logloss:0.14858\n",
      "[514]\tvalidation_0-logloss:0.14857\n",
      "[515]\tvalidation_0-logloss:0.14856\n",
      "[516]\tvalidation_0-logloss:0.14856\n",
      "[517]\tvalidation_0-logloss:0.14856\n",
      "[518]\tvalidation_0-logloss:0.14855\n",
      "[519]\tvalidation_0-logloss:0.14855\n",
      "[520]\tvalidation_0-logloss:0.14854\n",
      "[521]\tvalidation_0-logloss:0.14853\n",
      "[522]\tvalidation_0-logloss:0.14853\n",
      "[523]\tvalidation_0-logloss:0.14853\n",
      "[524]\tvalidation_0-logloss:0.14853\n",
      "[525]\tvalidation_0-logloss:0.14853\n",
      "[526]\tvalidation_0-logloss:0.14851\n",
      "[527]\tvalidation_0-logloss:0.14851\n",
      "[528]\tvalidation_0-logloss:0.14850\n",
      "[529]\tvalidation_0-logloss:0.14850\n",
      "[530]\tvalidation_0-logloss:0.14850\n",
      "[531]\tvalidation_0-logloss:0.14851\n",
      "[532]\tvalidation_0-logloss:0.14850\n",
      "[533]\tvalidation_0-logloss:0.14850\n",
      "Score:  0.9406741801198091\n",
      "Accuracy Score:  0.939729921819474\n"
     ]
    }
   ],
   "source": [
    "params = {'booster': 'gbtree', \n",
    "          'lambda': 0.019255034870770245,\n",
    "          'alpha': 0.056051989289062513, \n",
    "          'subsample': 0.892026619814502, \n",
    "          'colsampe_bytree': 0.8001658231649988}\n",
    "\n",
    "xgbc = XGBClassifier(**params, n_estimators=1000, learning_rate=.05, max_depth=3, verbosity=0)\n",
    "xgbc.fit(X_train_preprocessed, y_train, early_stopping_rounds=5, eval_set=[(X_test_preprocessed, y_test)])\n",
    "\n",
    "print('Score: ', xgbc.score(X_train_preprocessed, y_train))\n",
    "\n",
    "predictions = xgbc.predict(X_test_preprocessed)\n",
    "\n",
    "print('Accuracy Score: ', accuracy_score(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f3f5b97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-11T22:43:35.354445Z",
     "iopub.status.busy": "2024-11-11T22:43:35.354047Z",
     "iopub.status.idle": "2024-11-11T22:43:35.649519Z",
     "shell.execute_reply": "2024-11-11T22:43:35.648492Z"
    },
    "papermill": {
     "duration": 0.393292,
     "end_time": "2024-11-11T22:43:35.652231",
     "exception": false,
     "start_time": "2024-11-11T22:43:35.258939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Depression</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>140700</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>140701</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>140702</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140703</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>140704</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93795</th>\n",
       "      <td>234495</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93796</th>\n",
       "      <td>234496</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93797</th>\n",
       "      <td>234497</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93798</th>\n",
       "      <td>234498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93799</th>\n",
       "      <td>234499</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93800 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           id  Depression\n",
       "0      140700           0\n",
       "1      140701           0\n",
       "2      140702           0\n",
       "3      140703           1\n",
       "4      140704           0\n",
       "...       ...         ...\n",
       "93795  234495           0\n",
       "93796  234496           1\n",
       "93797  234497           0\n",
       "93798  234498           1\n",
       "93799  234499           0\n",
       "\n",
       "[93800 rows x 2 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sublesson = pd.DataFrame()\n",
    "sublesson['id'] = test.id\n",
    "\n",
    "predictions = xgbc.predict(test_preprocessed)\n",
    "\n",
    "sublesson['Depression'] = predictions\n",
    "sublesson.to_csv('PS_S4E11.csv', index=False)\n",
    "\n",
    "sublesson"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff1487c8",
   "metadata": {
    "papermill": {
     "duration": 0.149953,
     "end_time": "2024-11-11T22:43:35.896637",
     "exception": false,
     "start_time": "2024-11-11T22:43:35.746684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This got me my highest score... With that said I should research on what exactly pipeline and optuna do and clean up this notebook"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10008389,
     "sourceId": 84895,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 63.464385,
   "end_time": "2024-11-11T22:43:36.712099",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-11T22:42:33.247714",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
