{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84895,"databundleVersionId":10008389,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ntrain = pd.read_csv('/kaggle/input/playground-series-s4e11/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s4e11/test.csv')\n\ntrain","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-11T03:51:49.021977Z","iopub.execute_input":"2024-11-11T03:51:49.022479Z","iopub.status.idle":"2024-11-11T03:51:51.193113Z","shell.execute_reply.started":"2024-11-11T03:51:49.022416Z","shell.execute_reply":"2024-11-11T03:51:51.191950Z"},"trusted":true},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e11/sample_submission.csv\n/kaggle/input/playground-series-s4e11/train.csv\n/kaggle/input/playground-series-s4e11/test.csv\n","output_type":"stream"},{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"            id      Name  Gender   Age           City  \\\n0            0  Aaradhya  Female  49.0       Ludhiana   \n1            1     Vivan    Male  26.0       Varanasi   \n2            2    Yuvraj    Male  33.0  Visakhapatnam   \n3            3    Yuvraj    Male  22.0         Mumbai   \n4            4      Rhea  Female  30.0         Kanpur   \n...        ...       ...     ...   ...            ...   \n140695  140695     Vidya  Female  18.0      Ahmedabad   \n140696  140696      Lata  Female  41.0      Hyderabad   \n140697  140697   Aanchal  Female  24.0        Kolkata   \n140698  140698    Prachi  Female  49.0       Srinagar   \n140699  140699       Sai    Male  27.0          Patna   \n\n       Working Professional or Student         Profession  Academic Pressure  \\\n0                 Working Professional               Chef                NaN   \n1                 Working Professional            Teacher                NaN   \n2                              Student                NaN                5.0   \n3                 Working Professional            Teacher                NaN   \n4                 Working Professional   Business Analyst                NaN   \n...                                ...                ...                ...   \n140695            Working Professional                NaN                NaN   \n140696            Working Professional     Content Writer                NaN   \n140697            Working Professional  Marketing Manager                NaN   \n140698            Working Professional            Plumber                NaN   \n140699                         Student                NaN                4.0   \n\n        Work Pressure  CGPA  Study Satisfaction  Job Satisfaction  \\\n0                 5.0   NaN                 NaN               2.0   \n1                 4.0   NaN                 NaN               3.0   \n2                 NaN  8.97                 2.0               NaN   \n3                 5.0   NaN                 NaN               1.0   \n4                 1.0   NaN                 NaN               1.0   \n...               ...   ...                 ...               ...   \n140695            5.0   NaN                 NaN               4.0   \n140696            5.0   NaN                 NaN               4.0   \n140697            3.0   NaN                 NaN               1.0   \n140698            5.0   NaN                 NaN               2.0   \n140699            NaN  9.24                 1.0               NaN   \n\n           Sleep Duration Dietary Habits    Degree  \\\n0       More than 8 hours        Healthy       BHM   \n1       Less than 5 hours      Unhealthy       LLB   \n2               5-6 hours        Healthy   B.Pharm   \n3       Less than 5 hours       Moderate       BBA   \n4               5-6 hours      Unhealthy       BBA   \n...                   ...            ...       ...   \n140695          5-6 hours      Unhealthy  Class 12   \n140696          7-8 hours       Moderate    B.Tech   \n140697  More than 8 hours       Moderate     B.Com   \n140698          5-6 hours       Moderate        ME   \n140699  Less than 5 hours        Healthy       BCA   \n\n       Have you ever had suicidal thoughts ?  Work/Study Hours  \\\n0                                         No               1.0   \n1                                        Yes               7.0   \n2                                        Yes               3.0   \n3                                        Yes              10.0   \n4                                        Yes               9.0   \n...                                      ...               ...   \n140695                                    No               2.0   \n140696                                   Yes               6.0   \n140697                                    No               4.0   \n140698                                   Yes              10.0   \n140699                                   Yes               2.0   \n\n        Financial Stress Family History of Mental Illness  Depression  \n0                    2.0                               No           0  \n1                    3.0                               No           1  \n2                    1.0                               No           1  \n3                    1.0                              Yes           1  \n4                    4.0                              Yes           0  \n...                  ...                              ...         ...  \n140695               4.0                              Yes           1  \n140696               5.0                              Yes           0  \n140697               4.0                               No           0  \n140698               1.0                               No           0  \n140699               3.0                              Yes           1  \n\n[140700 rows x 20 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Name</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>City</th>\n      <th>Working Professional or Student</th>\n      <th>Profession</th>\n      <th>Academic Pressure</th>\n      <th>Work Pressure</th>\n      <th>CGPA</th>\n      <th>Study Satisfaction</th>\n      <th>Job Satisfaction</th>\n      <th>Sleep Duration</th>\n      <th>Dietary Habits</th>\n      <th>Degree</th>\n      <th>Have you ever had suicidal thoughts ?</th>\n      <th>Work/Study Hours</th>\n      <th>Financial Stress</th>\n      <th>Family History of Mental Illness</th>\n      <th>Depression</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Aaradhya</td>\n      <td>Female</td>\n      <td>49.0</td>\n      <td>Ludhiana</td>\n      <td>Working Professional</td>\n      <td>Chef</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>More than 8 hours</td>\n      <td>Healthy</td>\n      <td>BHM</td>\n      <td>No</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>No</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Vivan</td>\n      <td>Male</td>\n      <td>26.0</td>\n      <td>Varanasi</td>\n      <td>Working Professional</td>\n      <td>Teacher</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>Less than 5 hours</td>\n      <td>Unhealthy</td>\n      <td>LLB</td>\n      <td>Yes</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Yuvraj</td>\n      <td>Male</td>\n      <td>33.0</td>\n      <td>Visakhapatnam</td>\n      <td>Student</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>8.97</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>5-6 hours</td>\n      <td>Healthy</td>\n      <td>B.Pharm</td>\n      <td>Yes</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>No</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Yuvraj</td>\n      <td>Male</td>\n      <td>22.0</td>\n      <td>Mumbai</td>\n      <td>Working Professional</td>\n      <td>Teacher</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>Less than 5 hours</td>\n      <td>Moderate</td>\n      <td>BBA</td>\n      <td>Yes</td>\n      <td>10.0</td>\n      <td>1.0</td>\n      <td>Yes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Rhea</td>\n      <td>Female</td>\n      <td>30.0</td>\n      <td>Kanpur</td>\n      <td>Working Professional</td>\n      <td>Business Analyst</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>5-6 hours</td>\n      <td>Unhealthy</td>\n      <td>BBA</td>\n      <td>Yes</td>\n      <td>9.0</td>\n      <td>4.0</td>\n      <td>Yes</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>140695</th>\n      <td>140695</td>\n      <td>Vidya</td>\n      <td>Female</td>\n      <td>18.0</td>\n      <td>Ahmedabad</td>\n      <td>Working Professional</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>5-6 hours</td>\n      <td>Unhealthy</td>\n      <td>Class 12</td>\n      <td>No</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>Yes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>140696</th>\n      <td>140696</td>\n      <td>Lata</td>\n      <td>Female</td>\n      <td>41.0</td>\n      <td>Hyderabad</td>\n      <td>Working Professional</td>\n      <td>Content Writer</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>7-8 hours</td>\n      <td>Moderate</td>\n      <td>B.Tech</td>\n      <td>Yes</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>Yes</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>140697</th>\n      <td>140697</td>\n      <td>Aanchal</td>\n      <td>Female</td>\n      <td>24.0</td>\n      <td>Kolkata</td>\n      <td>Working Professional</td>\n      <td>Marketing Manager</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>More than 8 hours</td>\n      <td>Moderate</td>\n      <td>B.Com</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>140698</th>\n      <td>140698</td>\n      <td>Prachi</td>\n      <td>Female</td>\n      <td>49.0</td>\n      <td>Srinagar</td>\n      <td>Working Professional</td>\n      <td>Plumber</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>5-6 hours</td>\n      <td>Moderate</td>\n      <td>ME</td>\n      <td>Yes</td>\n      <td>10.0</td>\n      <td>1.0</td>\n      <td>No</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>140699</th>\n      <td>140699</td>\n      <td>Sai</td>\n      <td>Male</td>\n      <td>27.0</td>\n      <td>Patna</td>\n      <td>Student</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>9.24</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>Less than 5 hours</td>\n      <td>Healthy</td>\n      <td>BCA</td>\n      <td>Yes</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>Yes</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>140700 rows × 20 columns</p>\n</div>"},"metadata":{}}],"execution_count":1},{"cell_type":"markdown","source":"# <center>Kaggle Playground: Predicting Loan Approval</center>","metadata":{}},{"cell_type":"markdown","source":"### <center>Your goal is to use data from a mental health survey to explore factors that may cause individuals to experience depression.</center>","metadata":{}},{"cell_type":"code","source":"train.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-11-11T03:51:51.194725Z","iopub.execute_input":"2024-11-11T03:51:51.195187Z","iopub.status.idle":"2024-11-11T03:51:51.205933Z","shell.execute_reply.started":"2024-11-11T03:51:51.195149Z","shell.execute_reply":"2024-11-11T03:51:51.204724Z"},"trusted":true},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"id                                         int64\nName                                      object\nGender                                    object\nAge                                      float64\nCity                                      object\nWorking Professional or Student           object\nProfession                                object\nAcademic Pressure                        float64\nWork Pressure                            float64\nCGPA                                     float64\nStudy Satisfaction                       float64\nJob Satisfaction                         float64\nSleep Duration                            object\nDietary Habits                            object\nDegree                                    object\nHave you ever had suicidal thoughts ?     object\nWork/Study Hours                         float64\nFinancial Stress                         float64\nFamily History of Mental Illness          object\nDepression                                 int64\ndtype: object"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX = train.drop(['Name', 'Depression', 'id'], axis=1)\ny = train['Depression']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=10, test_size=.3)","metadata":{"execution":{"iopub.status.busy":"2024-11-11T03:51:51.207272Z","iopub.execute_input":"2024-11-11T03:51:51.208409Z","iopub.status.idle":"2024-11-11T03:51:52.752075Z","shell.execute_reply.started":"2024-11-11T03:51:51.208357Z","shell.execute_reply":"2024-11-11T03:51:52.750903Z"},"trusted":true},"outputs":[],"execution_count":3},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder, FunctionTransformer\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n\nnumerical_columns = X.select_dtypes(exclude=['object'])\n\ncategorical_columns = X.select_dtypes(include=['object']).columns\n\nnumerical_pipeline = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler()),\n    ('conver_to_float32', FunctionTransformer(lambda x: x.astype(np.float32)))\n])\n\ncategorical_pipeline = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('ordinal', OrdinalEncoder(dtype=np.int32, handle_unknown='use_encoded_value', unknown_value=-1))\n])\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('num', numerical_pipeline, numerical_columns),\n        ('cat', categorical_pipeline, categorical_columns)\n    ]\n)\n\nX_train_preprocessed = preprocessor.fit_transform(X_train)\nX_test_preprocessed = preprocessor.transform(X_test) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-11T03:51:52.754570Z","iopub.execute_input":"2024-11-11T03:51:52.755087Z","iopub.status.idle":"2024-11-11T03:51:53.616086Z","shell.execute_reply.started":"2024-11-11T03:51:52.755049Z","shell.execute_reply":"2024-11-11T03:51:53.614523Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[4], line 29\u001b[0m\n\u001b[1;32m     17\u001b[0m categorical_pipeline \u001b[38;5;241m=\u001b[39m Pipeline(steps\u001b[38;5;241m=\u001b[39m[\n\u001b[1;32m     18\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mimputer\u001b[39m\u001b[38;5;124m'\u001b[39m, SimpleImputer(strategy\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mconstant\u001b[39m\u001b[38;5;124m'\u001b[39m, fill_value\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmissing\u001b[39m\u001b[38;5;124m'\u001b[39m)),\n\u001b[1;32m     19\u001b[0m     (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mordinal\u001b[39m\u001b[38;5;124m'\u001b[39m, OrdinalEncoder(dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mint32, handle_unknown\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124muse_encoded_value\u001b[39m\u001b[38;5;124m'\u001b[39m, unknown_value\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m))\n\u001b[1;32m     20\u001b[0m ])\n\u001b[1;32m     22\u001b[0m preprocessor \u001b[38;5;241m=\u001b[39m ColumnTransformer(\n\u001b[1;32m     23\u001b[0m     transformers \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m     24\u001b[0m         (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnum\u001b[39m\u001b[38;5;124m'\u001b[39m, numerical_pipeline, numerical_columns),\n\u001b[1;32m     25\u001b[0m         (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcat\u001b[39m\u001b[38;5;124m'\u001b[39m, categorical_pipeline, categorical_columns)\n\u001b[1;32m     26\u001b[0m     ]\n\u001b[1;32m     27\u001b[0m )\n\u001b[0;32m---> 29\u001b[0m X_train_preprocessed \u001b[38;5;241m=\u001b[39m \u001b[43mpreprocessor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     30\u001b[0m X_test_preprocessed \u001b[38;5;241m=\u001b[39m preprocessor\u001b[38;5;241m.\u001b[39mtransform(X_test) \n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[0;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[1;32m    139\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m--> 140\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    141\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    142\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[1;32m    143\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m (\n\u001b[1;32m    144\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[1;32m    145\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[1;32m    146\u001b[0m         )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:724\u001b[0m, in \u001b[0;36mColumnTransformer.fit_transform\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    722\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_n_features(X, reset\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    723\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_transformers()\n\u001b[0;32m--> 724\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_column_callables\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    725\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_remainder(X)\n\u001b[1;32m    727\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_transform(X, y, _fit_transform_one)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:426\u001b[0m, in \u001b[0;36mColumnTransformer._validate_column_callables\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    424\u001b[0m         columns \u001b[38;5;241m=\u001b[39m columns(X)\n\u001b[1;32m    425\u001b[0m     all_columns\u001b[38;5;241m.\u001b[39mappend(columns)\n\u001b[0;32m--> 426\u001b[0m     transformer_to_input_indices[name] \u001b[38;5;241m=\u001b[39m \u001b[43m_get_column_indices\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    428\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_columns \u001b[38;5;241m=\u001b[39m all_columns\n\u001b[1;32m    429\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_transformer_to_input_indices \u001b[38;5;241m=\u001b[39m transformer_to_input_indices\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/__init__.py:406\u001b[0m, in \u001b[0;36m_get_column_indices\u001b[0;34m(X, key)\u001b[0m\n\u001b[1;32m    399\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Get feature column indices for input data X and key.\u001b[39;00m\n\u001b[1;32m    400\u001b[0m \n\u001b[1;32m    401\u001b[0m \u001b[38;5;124;03mFor accepted values of `key`, see the docstring of\u001b[39;00m\n\u001b[1;32m    402\u001b[0m \u001b[38;5;124;03m:func:`_safe_indexing_column`.\u001b[39;00m\n\u001b[1;32m    403\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    404\u001b[0m n_columns \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m--> 406\u001b[0m key_dtype \u001b[38;5;241m=\u001b[39m \u001b[43m_determine_key_type\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    408\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, (\u001b[38;5;28mlist\u001b[39m, \u001b[38;5;28mtuple\u001b[39m)) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m key:\n\u001b[1;32m    409\u001b[0m     \u001b[38;5;66;03m# we get an empty list\u001b[39;00m\n\u001b[1;32m    410\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m []\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/__init__.py:282\u001b[0m, in \u001b[0;36m_determine_key_type\u001b[0;34m(key, accept_slice)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m    281\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err_msg)\n\u001b[0;32m--> 282\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err_msg)\n","\u001b[0;31mValueError\u001b[0m: No valid specification of the columns. Only a scalar, list or slice of all integers or all strings, or boolean mask is allowed"],"ename":"ValueError","evalue":"No valid specification of the columns. Only a scalar, list or slice of all integers or all strings, or boolean mask is allowed","output_type":"error"}],"execution_count":4},{"cell_type":"code","source":"from sklearn import ensemble\nfrom sklearn.metrics import accuracy_score\n\nhg = ensemble.HistGradientBoostingClassifier()\nmodel = hg.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\n\nprint('Accuracy: ', accuracy_score(y_test, predictions))","metadata":{"execution":{"iopub.status.busy":"2024-11-11T03:51:53.617164Z","iopub.status.idle":"2024-11-11T03:51:53.617558Z","shell.execute_reply.started":"2024-11-11T03:51:53.617370Z","shell.execute_reply":"2024-11-11T03:51:53.617391Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sublesson = pd.DataFrame()\nsublesson['id'] = test.id\n\nfeats = test.select_dtypes(include=[np.number]).drop(['id'], axis=1).interpolate()\npredictions = model.predict(feats)\n\nsublesson['Depression'] = predictions\nsublesson.to_csv('PS_S4E11.csv', index=False)\n\nsublesson","metadata":{"execution":{"iopub.status.busy":"2024-11-11T03:51:53.618529Z","iopub.status.idle":"2024-11-11T03:51:53.618987Z","shell.execute_reply.started":"2024-11-11T03:51:53.618742Z","shell.execute_reply":"2024-11-11T03:51:53.618763Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Public Score: 0.92569","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\nxgbc = XGBClassifier(n_estimators=1000, learning_rate=.05, max_depth=3, verbosity=1)\nxgbc.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)])\n\nprint('Score: ', xgbc.score(X_train, y_train))\n\npredictions = xgbc.predict(X_test)\n\nprint('Accuracy Score: ', accuracy_score(y_test, predictions))","metadata":{"execution":{"iopub.status.busy":"2024-11-11T03:51:53.620273Z","iopub.status.idle":"2024-11-11T03:51:53.620637Z","shell.execute_reply.started":"2024-11-11T03:51:53.620455Z","shell.execute_reply":"2024-11-11T03:51:53.620472Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sublesson = pd.DataFrame()\nsublesson['id'] = test.id\n\nfeats = test.select_dtypes(include=[np.number]).drop(['id'], axis=1).interpolate()\npredictions = xgbc.predict(feats)\n\nsublesson['Depression'] = predictions\nsublesson.to_csv('PS_S4E11.csv', index=False)\n\nsublesson","metadata":{"execution":{"iopub.status.busy":"2024-11-11T03:51:53.622626Z","iopub.status.idle":"2024-11-11T03:51:53.623054Z","shell.execute_reply.started":"2024-11-11T03:51:53.622828Z","shell.execute_reply":"2024-11-11T03:51:53.622874Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Public Score: .91513","metadata":{}},{"cell_type":"markdown","source":"Currently trying to improve my XGBoost score since I know that this is supposed to have advantages over other models...\nBest Public Score: .92401","metadata":{}},{"cell_type":"code","source":"xgbc = XGBClassifier(n_estimators=1000, learning_rate=.05,verbosity=0)\nxgbc.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)])\n\nprint('Score: ', xgbc.score(X_train, y_train))\n\npredictions = xgbc.predict(X_test)\n\nprint('Accuracy Score: ', accuracy_score(y_test, predictions))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-11T03:51:53.625019Z","iopub.status.idle":"2024-11-11T03:51:53.625383Z","shell.execute_reply.started":"2024-11-11T03:51:53.625205Z","shell.execute_reply":"2024-11-11T03:51:53.625224Z"}},"outputs":[],"execution_count":null}]}